{
    "assignments": [
        {
            "name": "stringsAndLists",
            "type": "fundamentals",
            "test": "stringsAndLists_test.py"
        },
        {
            "name": "multiplesSumAverage",
            "type": "fundamentals",
            "test": "multiplesSumAverage_test.py"   
        },
        {
            "name": "filterByType",
            "type": "fundamentals",
            "test": "filterByType_test.py"  
        },
        {
            "name": "typeList",
            "type": "fundamentals",
            "test": "typeList_test.py"  
        },
        {
            "name": "comparingLists",
            "type": "fundamentals",
            "test": "comparingLists_test.py"
        },
        {
            "name": "findingCharacters",
            "type": "fundamentals",
            "test": "findingCharacters_test.py"
        },
        {
            "name": "checkerboard",
            "type": "fundamentals",
            "test": "checkerboard_test.py"
        },
        {
            "name": "multiplicationTable",
            "type": "fundamentals",
            "test": "multiplicationTable_test.py"
        },
        {
            "name": "fooAndBar",
            "type": "fundamentals",
            "test": "fooAndBar_test.py"
        },
        {
            "name": "funWithFunctions",
            "type": "fundamentals",
            "test": "funWithFunctions_test.py"
        },
        {
            "name": "scoresAndGrades",
            "type": "fundamentals",
            "test": "scoresAndGrades_test.py"
        },
        {
            "name": "coinTosses",
            "type": "fundamentals",
            "test": "coinTosses_test.py"
        },
        {
            "name": "stars",
            "type": "fundamentals",
            "test": "stars_test.py"
        },
        {
            "name": "dictionaryBasics",
            "type": "fundamentals",
            "test": "dictionaryBasics_test.py"
        },
        {
            "name": "names.py",
            "type": "fundamentals",
            "test": "names_test.py"
        },
        {
            "name": "makingTuples.py",
            "type": "fundamentals",
            "test": "makingTuples_test.py"
        },
        {
            "name": "listsToDict.py",
            "type": "fundamentals",
            "test": "listsToDict_test.py"
        },
        {
            "name": "bike.py",
            "type": "oop",
            "test": "bike_test.py"
        },
        {
            "name": "car.py",
            "type": "oop",
            "test": "car_test.py"
        },
        {
            "name": "product.py",
            "type": "oop",
            "test": "product_test.py"
        },
        {
            "name": "store.py",
            "type": "oop",
            "test": "store_test.py"
        },
        {
            "name": "animal.py",
            "type": "oop",
            "test": "animal_test.py"
        },
        {
            "name": "mathDojo.py",
            "type": "oop",
            "test": "mathDojo_test.py"
        },
        {
            "name": "callCenter",
            "type": "oop",
            "test": "callCenter_test.py"
        },
        {
            "name": "hospital",
            "type": "oop",
            "test": "hospital_test.py"
        },
        {
            "name": "underscore",
            "type": "oop",
            "test": "underscore_test.py"
        },
        {
            "name": "modularStore.py",
            "type": "oop",
            "test": "modularStore_test.py"
        },
        {
            "name": "helloWorld",
            "type": "flask",
            "test": "helloWorld_test.py"
        },
        {
            "name": "portfolio",
            "type": "flask",
            "test": "portfolio_test.py"
        },
        {
            "name": "landingPage",
            "type": "flask",
            "test": "landingPage_test.py"
        },
        {
            "name": "whatsMyName",
            "type": "flask",
            "test": "whatsMyName_test.py"
        },
        {
            "name": "dojoSurvey",
            "type": "flask",
            "test": "dojoSurvey_test.py"
        },
        {
            "name": "disappearingNinja",
            "type": "flask",
            "test": "disappearingNinja_test.py"
        },
        {
            "name": "colorPicker",
            "type": "flask",
            "test": "colorPicker_test.py`"
        },
        {
            "name": "counter",
            "type": "flask",
            "test": "counter_test.py"
        },
        {
            "name": "greatNumberGame",
            "type": "flask",
            "test": "greatNumberGame_test.py"
        },
        {
            "name": "ninjaGold",
            "type": "flask",
            "test": "ninjaGold_test.py"
        },
        {
            "name": "dojoSurveyWithValidation",
            "type": "flask",
            "test": "dojoSurveyWithValidation_test.py"
        },
        {
            "name": "registrationForm",
            "type": "flask",
            "test": "registrationForm_test.py"
        },
        {
            "name": "multipleApps",
            "type": "django",
            "test": "multipleApps_test.py"
        },
        {
            "name": "timeDisplay",
            "type": "django",
            "test": "timeDisplay_test.py"
        },
        {
            "name": "randomWordGenerator",
            "type": "django",
            "test": "randomWordGenerator_test.py"
        },
        {
            "name": "surveyForm",
            "type": "django",
            "test": "surveyForm_test.py"
        },
        {
            "name": "sessionWords",
            "type": "django",
            "test": "sessionWords_test.py"
        },
        {
            "name": "amadon",
            "type": "django",
            "test": "amadon_test.py"
        },
        {
            "name": "ninjaGold",
            "type": "django",
            "test": "ninjaGold_test.py"
        },
        {
            "name": "users",
            "type": "django",
            "test": "users_test.py"
        },
        {
            "name": "dojoNinjas",
            "type": "django",
            "test": "dojoNinjas_test.py"
        },
        {
            "name": "booksAndAuthors",
            "type": "django",
            "test": "booksAndAuthors_test.py"
        },
        {
            "name": "likesAndBooks",
            "type": "django",
            "test": "likesAndBooks_test.py"
        },
        {
            "name": "sportsORM",
            "type": "django",
            "test": "sportsORM_test.py"
        },
        {
            "name": "sportsORM2",
            "type": "django",
            "test": "sportsORM2_test.py"
        },
        {
            "name": "semiRestfulUsers",
            "type": "django",
            "test": "semiRestfulUsers_test.py"
        },
        {
            "name": "courses",
            "type": "django",
            "test": "courses_test.py"
        },
        {
            "name": "loginAndRegistration",
            "type": "django",
            "test": "loginAndRegistration_test.py"
        },
        {
            "name": "userDashboard",
            "type": "django",
            "test": "userDashboard_test.py"
        },
        {
            "name": "beltReviewer",
            "type": "django",
            "test": "beltReviewer_test.py"
        },
        {
            "name": "testing",
            "type": "django",
            "test": "testing_test.py",
            "tests": [
                "login page exists",
                "registration validation errors are displayed",
                "login validation errors are displayed",
                "user can successfully login",
                "user can successfully register"
            ]
        },
        {
            "name": "friends",
            "type": "belt_exam",
            "test": "friends_test.py",
            "tests": [
                "login: login page exists",
                "login: email required",
                "login: email valid",
                "login: email exists",
                "login: password minimum length",
                "login: incorrect password",
                "login: successful login",
                "login: redirects to /friends",
                "register: name minimum length",
                "register: alias minimum length",
                "register: email required",
                "register: email valid",
                "register: email unique",
                "register: password minimum length",
                "register: confirm password and password match",
                "register: date of birth exists",
                "register: date of birth in past",
                "register: successful register",
                "register: redirects to /friends",
                "friends: /friends contains previous user",
                "friends: can friend user",
                "friends: can unfriend user",
                "friends: user profile exists",
                "logout: returns to login page",
                "logout: redirects",
                "logout: clears session"
            ]
        },
        {
            "name": "quotes",
            "type": "belt_exam",
            "test": "quotes_test.py",
            "tests": [
                "login: login page exists",
                "login: email required",
                "login: email valid",
                "login: email exists",
                "login: password minimum length",
                "login: incorrect password",
                "login: successful login",
                "login: redirects to /quotes",
                "register: name minimum length",
                "register: alias minimum length",
                "register: email required",
                "register: email valid",
                "register: email unique",
                "register: password minimum length",
                "register: confirm password and password match",
                "register: date of birth exists",
                "register: date of birth in past",
                "register: successful register",
                "register: redirects to /friends",
                "quotes: initializes with no quotes",
                "quotes: quoted by minimum length",
                "quotes: message minimum length",
                "quotes: can create quote",
                "quotes: quote initializes as a favorite",
                "quotes: quote can be unfavorited",
                "quotes: quote can be favorited",
                "quotes: user page exists",
                "quotes: user page has quote count",
                "quotes: user page shows quotes",
                "logout: returns to login page",
                "logout: redirects",
                "logout: clears session"
            ]
        },
        {
            "name": "travel_buddy",
            "type": "belt_exam",
            "test": "travel_buddy_test.py",
            "tests": [
                "login: login page exists",
                "login: username required",
                "login: username exists",
                "login: password minimum length",
                "login: incorrect password",
                "login: successful login",
                "login: redirects to /travels",
                "register: name minimum length",
                "register: username required",
                "register: username unique",
                "register: password minimum length",
                "register: confirm password and password match",
                "register: successful register",
                "register: redirects to /travels",
                "travels: initializes no joined trips",
                "travels: initializes no other trips",
                "add: travels add page exists",
                "add: destination required",
                "add: description required",
                "add: start date required",
                "add: end date required",
                "add: start date in future",
                "add: end date in future",
                "add: end date after start date",
                "add: add trip successfully",
                "add: successful add trip redirects to /travels",
                "travels: user autojoins their trip",
                "travels: other user has not yet joined trip",
                "travels: other user can join trip",
                "destination: destination page exists",
                "destination: destination page has destination",
                "destination: destination page has description",
                "destination: destination page has planner",
                "destination: destination page no other users joined",
                "destination: destination page joined user in other users going",
                "logout: returns to login page",
                "logout: redirects",
                "logout: clears session"
            ]
        }
    ]
}