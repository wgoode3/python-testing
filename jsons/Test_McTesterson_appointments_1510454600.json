{
	"project": "appointments",
	"student": {
		"first_name": "Test",
		"last_name": "McTesterson"
	},
	"appointments/appointments/urls.py": {
		"raw": "\"\"\"appointments URL Configuration The `urlpatterns` list routes URLs to views. For more information please see: https://docs.djangoproject.com/en/1.11/topics/http/urls/ Examples: Function views 1. Add an import: from my_app import views 2. Add a URL to urlpatterns: url(r'^$', views.home, name='home') Class-based views 1. Add an import: from other_app.views import Home 2. Add a URL to urlpatterns: url(r'^$', Home.as_view(), name='home') Including another URLconf 1. Import the include() function: from django.conf.urls import url, include 2. Add a URL to urlpatterns: url(r'^blog/', include('blog.urls')) \"\"\" from django.conf.urls import url, include urlpatterns = [ url(r'^', include('apps.appointment_app.urls')) ] ",
		"hash": "453b9df3071390a0648cd8ab1cca535a5b2aa475b792c445ae40be2055fb5739d18c82d91c5f494965fbfae1b56eca1dea576dddb7f70ff6fc862d9ddfb83eef"
	},
	"appointments/appointments/wsgi.py": {
		"raw": "\"\"\" WSGI config for appointments project. It exposes the WSGI callable as a module-level variable named ``application``. For more information on this file, see https://docs.djangoproject.com/en/1.11/howto/deployment/wsgi/ \"\"\" import os from django.core.wsgi import get_wsgi_application os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"appointments.settings\") application = get_wsgi_application() ",
		"hash": "bda2877867c2b47fbff14982c7be80baffa636b496d62ae289611f36b997422c20db74c8f3f2886be47f9040c7852cff3746fab47089e92839d21909fc692504"
	},
	"appointments/appointments/settings.py": {
		"raw": "\"\"\" Django settings for appointments project. Generated by 'django-admin startproject' using Django 1.11.6. For more information on this file, see https://docs.djangoproject.com/en/1.11/topics/settings/ For the full list of settings and their values, see https://docs.djangoproject.com/en/1.11/ref/settings/ \"\"\" import os # Build paths inside the project like this: os.path.join(BASE_DIR, ...) BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__))) # Quick-start development settings - unsuitable for production # See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/ # SECURITY WARNING: keep the secret key used in production secret! SECRET_KEY = '$nxej0kxhhbm4&$rgyd(fi_h5r25-y@%#_h!t=i_$1*6=bmbmh' # SECURITY WARNING: don't run with debug turned on in production! DEBUG = True ALLOWED_HOSTS = [] # Application definition INSTALLED_APPS = [ 'apps.appointment_app', 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', ] MIDDLEWARE = [ 'django.middleware.security.SecurityMiddleware', 'django.contrib.sessions.middleware.SessionMiddleware', 'django.middleware.common.CommonMiddleware', 'django.middleware.csrf.CsrfViewMiddleware', 'django.contrib.auth.middleware.AuthenticationMiddleware', 'django.contrib.messages.middleware.MessageMiddleware', 'django.middleware.clickjacking.XFrameOptionsMiddleware', ] ROOT_URLCONF = 'appointments.urls' TEMPLATES = [ { 'BACKEND': 'django.template.backends.django.DjangoTemplates', 'DIRS': [], 'APP_DIRS': True, 'OPTIONS': { 'context_processors': [ 'django.template.context_processors.debug', 'django.template.context_processors.request', 'django.contrib.auth.context_processors.auth', 'django.contrib.messages.context_processors.messages', ], }, }, ] WSGI_APPLICATION = 'appointments.wsgi.application' # Database # https://docs.djangoproject.com/en/1.11/ref/settings/#databases DATABASES = { 'default': { 'ENGINE': 'django.db.backends.sqlite3', 'NAME': os.path.join(BASE_DIR, 'db.sqlite3'), } } # Password validation # https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators AUTH_PASSWORD_VALIDATORS = [ { 'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator', }, { 'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator', }, { 'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator', }, { 'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator', }, ] # Internationalization # https://docs.djangoproject.com/en/1.11/topics/i18n/ LANGUAGE_CODE = 'en-us' TIME_ZONE = 'UTC' USE_I18N = True USE_L10N = True USE_TZ = True # Static files (CSS, JavaScript, Images) # https://docs.djangoproject.com/en/1.11/howto/static-files/ STATIC_URL = '/static/' USE_TZ = False",
		"hash": "4597dee1916e3e8e5bdc41754366d3073cfdbadc0dad389f93ab12d4c377e11bed9b131ef632c784da293c88ae286c830503792b39fc4789f14289ed3754c1e7"
	},
	"appointments/apps/appointment_app/urls.py": {
		"raw": "from django.conf.urls import url from . import views urlpatterns = [ url(r'^$', views.index), url(r'^register$', views.register), url(r'^login$', views.login), url(r'^logout$', views.logout), url(r'^appointments$', views.appointments), url(r'^add_appointment$', views.add), url(r'^appointments/(?P<id>\\d+)$', views.edit), url(r'^appointments/(?P<id>\\d+)/update$', views.update), url(r'^appointments/(?P<id>\\d+)/delete$', views.delete) ] ",
		"hash": "5a56f5065aef135524aab9223fa349bc260518c7107d0f42757da1cc1a91dc2168f70f31e41af09d465bc1dbd06067c8e4299c37f6326cb95cb64f239ac19ec6"
	},
	"appointments/apps/appointment_app/migrations/0003_task_user.py": {
		"raw": "# -*- coding: utf-8 -*- # Generated by Django 1.11.6 on 2017-11-08 15:23 from __future__ import unicode_literals from django.db import migrations, models import django.db.models.deletion class Migration(migrations.Migration): dependencies = [ ('appointment_app', '0002_task'), ] operations = [ migrations.AddField( model_name='task', name='user', field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to='appointment_app.User'), preserve_default=False, ), ] ",
		"hash": "8de2128d912a88ce15224bba247507129fe0b09e86bde1aaedef6d05113a2d14dcdcd3621b9714827e5964a3f5e5db3c8863d1983fb00645d1993dfb2eb00a33"
	},
	"appointments/apps/appointment_app/migrations/0002_task.py": {
		"raw": "# -*- coding: utf-8 -*- # Generated by Django 1.11.6 on 2017-11-08 14:53 from __future__ import unicode_literals from django.db import migrations, models import django.db.models.manager class Migration(migrations.Migration): dependencies = [ ('appointment_app', '0001_initial'), ] operations = [ migrations.CreateModel( name='Task', fields=[ ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')), ('when', models.DateTimeField()), ('task', models.CharField(max_length=255)), ('status', models.CharField(max_length=255)), ], managers=[ ('taskManager', django.db.models.manager.Manager()), ], ), ] ",
		"hash": "1dace8e81a33a02f88f85f38833cd4b61ad51d245ef7beb4677c9769a47b89ee4d0010addf9795735263b8eaef5fe7dfb6269e9abe268e5370b4f5e71857d9ab"
	},
	"appointments/apps/appointment_app/migrations/0001_initial.py": {
		"raw": "# -*- coding: utf-8 -*- # Generated by Django 1.11.6 on 2017-11-08 14:31 from __future__ import unicode_literals from django.db import migrations, models import django.db.models.manager class Migration(migrations.Migration): initial = True dependencies = [ ] operations = [ migrations.CreateModel( name='User', fields=[ ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')), ('name', models.CharField(max_length=255)), ('alias', models.CharField(max_length=255)), ('email', models.CharField(max_length=255)), ('password', models.CharField(max_length=255)), ('date_of_birth', models.DateField(max_length=255)), ], managers=[ ('userManager', django.db.models.manager.Manager()), ], ), ] ",
		"hash": "1fe066aa580c3fe052a91b0c390f06246954809f82759424d9469e89c769efe9c40b2594125ea0dd9dff46437df534aff3eff4f5c7aaaf081e5cedb73dd98502"
	},
	"appointments/apps/appointment_app/apps.py": {
		"raw": "# -*- coding: utf-8 -*- from __future__ import unicode_literals from django.apps import AppConfig class AppointmentAppConfig(AppConfig): name = 'appointment_app' ",
		"hash": "80f8bd2f4672b05442884553a30d8cc970a9e5d8a5a0a2b4f1da7d15d384c0cd5be3b7f41e8ba5b574d2fd16216e0e139909556d2693aee06d12e4a88eac68bb"
	},
	"appointments/apps/appointment_app/admin.py": {
		"raw": "# -*- coding: utf-8 -*- from __future__ import unicode_literals from django.contrib import admin # Register your models here. ",
		"hash": "76b0a5fa9b7702d7d92a3a76a622f57a2ddb69fa2aa14777079e25c915c0b863a86ca2b6a10b1289f1f7a22f20a3f2a2fc17e2e84347a450ea6404dcd4fc9211"
	},
	"appointments/apps/appointment_app/models.py": {
		"raw": "# -*- coding: utf-8 -*- from __future__ import unicode_literals from django.db import models from datetime import datetime import bcrypt import re EMAIL_REGEX = re.compile(r'^[a-zA-Z0-9.+_-]+@[a-zA-Z0-9._-]+\\.[a-zA-Z]+$') class UserManager(models.Manager): def register(self, data): response = { \"user\": None, \"logged_in\": False, \"errors\": [] } if len(data[\"name\"]) < 3: response[\"errors\"].append(\"Name must be 3 characters or longer!\") if len(data[\"alias\"]) < 3: response[\"errors\"].append(\"Alias must be 3 characters or longer!\") if len(data[\"email\"]) == 0: response[\"errors\"].append(\"Email is required!\") elif not EMAIL_REGEX.match(data[\"email\"]): response[\"errors\"].append(\"Invalid Email!\") elif len(User.userManager.filter(email=data[\"email\"])) > 0: response[\"errors\"].append(\"Email already in use!\") if len(data[\"password\"]) < 8: response[\"errors\"].append(\"Password must be 8 characters or longer!\") if data[\"password\"] != data[\"confirm_password\"]: response[\"errors\"].append(\"Confirm Password must match Password!\") if len(data[\"date_of_birth\"]) == 0: response[\"errors\"].append(\"Date of Birth is required!\") else: dob = datetime.strptime(data[\"date_of_birth\"], '%Y-%m-%d') if dob > datetime.now(): response[\"errors\"].append(\"Date of Birth must be in the past!\") if len(response[\"errors\"]) == 0: response[\"logged_in\"] = True response[\"user\"] = User.userManager.create( name=data[\"name\"], alias=data[\"alias\"], email=data[\"email\"], password=bcrypt.hashpw(data[\"password\"].encode(), bcrypt.gensalt()), date_of_birth=dob ) return response def login(self, data): response = { \"user\": None, \"logged_in\": False, \"errors\": [] } if len(data[\"email\"]) == 0: response[\"errors\"].append(\"Email is required!\") elif not EMAIL_REGEX.match(data[\"email\"]): response[\"errors\"].append(\"Invalid email!\") if len(data[\"password\"]) < 8: response[\"errors\"].append(\"Password must be 8 characters or longer!\") if len(response[\"errors\"]) == 0: user = User.userManager.filter(email=data[\"email\"]) if len(user) > 0: if bcrypt.checkpw(data[\"password\"].encode(), user[0].password.encode()): response[\"logged_in\"] = True response[\"user\"] = user[0] else: response[\"errors\"].append(\"Incorrect Password!\") else: response[\"errors\"].append(\"Email not found!\") return response class User(models.Model): name = models.CharField(max_length=255) alias = models.CharField(max_length=255) email = models.CharField(max_length=255) password = models.CharField(max_length=255) date_of_birth = models.DateField(max_length=255) userManager = UserManager() class TaskManager(models.Manager): def addTask(self, data, user_id): response = { \"saved\": False, \"errors\": [], \"task\": None } if len(data[\"date\"]) < 1: response[\"errors\"].append(\"Date is required!\") if len(data[\"time\"]) < 1: response[\"errors\"].append(\"Time is required!\") if len(data[\"task\"]) < 1: response[\"errors\"].append(\"Task is required!\") if len(response[\"errors\"]) == 0: when = datetime.strptime(\"{} {}\".format(data[\"date\"], data[\"time\"]) , \"%Y-%m-%d %H:%M\") if datetime.now().date() > when.date(): response[\"errors\"].append(\"Date must be in the future!\") if len(Task.taskManager.filter(user_id=user_id).filter(when=when)) > 0: response[\"errors\"].append(\"Appointment with this date and time already exists!\") if len(response[\"errors\"]) == 0: response[\"saved\"] = True response[\"task\"] = Task.taskManager.create( when=when, task=data[\"task\"], status=\"pending\", user_id=user_id ) return response def updateTask(self, data, user_id, appointment_id): response = { \"saved\": False, \"errors\": [], \"task\": None } if len(data[\"date\"]) < 1: response[\"errors\"].append(\"Date is required!\") if len(data[\"time\"]) < 1: response[\"errors\"].append(\"Time is required!\") if len(data[\"task\"]) < 1: response[\"errors\"].append(\"Task is required!\") if len(response[\"errors\"]) == 0: when = datetime.strptime(\"{} {}\".format(data[\"date\"], data[\"time\"]) , \"%Y-%m-%d %H:%M\") if datetime.now().date() > when.date(): response[\"errors\"].append(\"Date must be in the future!\") appointments = Task.taskManager.filter(user_id=user_id).filter(when=when) appointments = appointments.exclude(id=appointment_id) if len(appointments) > 0: response[\"errors\"].append(\"Appointment with this date and time already exists!\") if len(response[\"errors\"]) == 0: response[\"saved\"] = True task = Task.taskManager.get(id=appointment_id) task.task = data[\"task\"] task.when = when task.status = data[\"status\"] task.save() response[\"task\"] = task return response class Task(models.Model): when = models.DateTimeField() task = models.CharField(max_length=255) status = models.CharField(max_length=255) user = models.ForeignKey(User, related_name=\"tasks\") taskManager = TaskManager()",
		"hash": "5ad01a1e9202cb41422ba5990ec52a1019fdac08bfa52b805125e77b8c2fa98ab336627cbc5022f0ec4d675a01976cd1d2ca228acd5c6433c842c52f8ee5f1e3"
	},
	"appointments/apps/appointment_app/templates/appointments_app/appointments.html": {
		"raw": "<!DOCTYPE html> <html> <head> <title>Appointments</title> </head> <body> <p>Hello, {{ request.session.user.name }}!</p> <p><a href=\"/logout\">Logout</a></p> <fieldset> <legend>Your appointments for today, the {% now \"jS \\o\\f F\" %}:</legend> {% if todays_appointments|length > 0 %} <table border=1> <tr> <th>Tasks</th> <th>Time</th> <th>Status</th> <th>Actions</th> </tr> {% for appointment in todays_appointments %} <tr> <td>{{ appointment.task }}</td> <td>{{ appointment.when.time }}</td> <td>{{ appointment.status }}</td> <td> {% if appointment.status != \"Done\" %} <a href=\"/appointments/{{appointment.id}}\"><button>Edit</button></a> <form style=\"display: inline;\" action=\"/appointments/{{appointment.id}}/delete\" method=\"post\"> {% csrf_token %} <input type=\"submit\" value=\"Delete\"> </form> {% endif %} </td> </tr> {% endfor %} </table> {% else %} <p>You have no appointments today.</p> {% endif %} </fieldset> <fieldset> <legend>Your other appointments:</legend> {% if other_appointments|length > 0 %} <table border=1> <tr> <th>Tasks</th> <th>Date</th> <th>Time</th> </tr> {% for appointment in other_appointments %} <tr> <td>{{ appointment.task }}</td> <td>{{ appointment.when.date }}</td> <td>{{ appointment.when.time }}</td> </tr> {% endfor %} </table> {% else %} <p>You have no other appointments.</p> {% endif %} </fieldset> <fieldset> <legend>Add an appointment:</legend> <form action=\"add_appointment\", method=\"post\"> {% csrf_token %} Date: <input type=\"date\" name=\"date\"><br> Time: <input type=\"time\" name=\"time\"><br> Task: <textarea name=\"task\" placeholder=\"Task\"></textarea><br> <input type=\"submit\" value=\"Add\"> </form> </fieldset> {% if messages %} <ul> {% for message in messages %} <li>{{ message }}</li> {% endfor %} </ul> {% endif %} </body> </html>",
		"hash": "c8a77df97cde62f4d5d77cd877b39bcf3b366df788b89546753d878bf24d93a3ff33959a67a42c3dba86f5b84f1fe2b7f21d62a64e2103a22f981a99986a10f2"
	},
	"appointments/apps/appointment_app/templates/appointments_app/edit.html": {
		"raw": "<!DOCTYPE html> <html> <head> <title>Appointments</title> </head> <body> <p><a href=\"/appointments\">Dashboard</a> | <a href=\"/logout\">Logout</a></p> <fieldset> <legend>Edit Appointment:</legend> <form action=\"/appointments/{{appointment.id}}/update\" method=\"post\"> {% csrf_token %} Task: <input type=\"text\" name=\"task\" value=\"{{appointment.task}}\"><br> Date: <input type=\"date\" name=\"date\" value=\"{{appointment.when|date:'Y-m-d'}}\"><br> Time: <input type=\"time\" name=\"time\" value=\"{{appointment.when|date:'H:i'}}\"><br> Status: <select name=\"status\" value=\"{{appointment.status}}\"> <option>Pending</option> <option>Missed</option> <option>Done</option> </select><br> <input type=\"submit\" value=\"Update\"> </form> </fieldset> {% if messages %} <ul> {% for message in messages %} <li>{{ message }}</li> {% endfor %} </ul> {% endif %} </body> </html>",
		"hash": "3413e3d70e9ee1dea44df785c2478a38028f1014fbecc459b0efd6a07e69d8c4bbd44d13c9e563d2d261029e847bc884f72603a97ff38057612c9979fde4d0e7"
	},
	"appointments/apps/appointment_app/templates/appointments_app/index.html": {
		"raw": "<!DOCTYPE html> <html> <head> <title>Appointments</title> </head> <body> <h1>Welcome to Appointments</h1> <fieldset> <legend>Register</legend> <form action=\"/register\" method=\"post\"> {% csrf_token %} Name: <input type=\"text\" name=\"name\" placeholder=\"name\"><br> Alias: <input type=\"text\" name=\"alias\" placeholder=\"alias\"><br> Email: <input type=\"text\" name=\"email\" placeholder=\"email\"><br> Password: <input type=\"password\" name=\"password\" placeholder=\"password\"><br> Confirm Password: <input type=\"password\" name=\"confirm_password\" placeholder=\"confirm password\"><br> Date of Birth: <input type=\"date\" name=\"date_of_birth\"><br> <input type=\"submit\" value=\"Register\"> </form> </fieldset> <fieldset> <legend>Login</legend> <form action=\"/login\" method=\"post\"> {% csrf_token %} Email: <input type=\"text\" name=\"email\" placeholder=\"email\"><br> Password: <input type=\"password\" name=\"password\" placeholder=\"password\"><br> <input type=\"submit\" value=\"Login\"> </form> </fieldset> {% if messages %} <ul> {% for message in messages %} <li>{{ message }}</li> {% endfor %} </ul> {% endif %} </body> </html>",
		"hash": "3f3ecae249d66a5437e92310fed20ac3e72fb9918ae4cc1f91638edb911bce2195c385ddb84c356ab4125743cf6dd8ad7d49b1c57d3cfba3573c40fc724dfcb2"
	},
	"appointments/apps/appointment_app/views.py": {
		"raw": "# -*- coding: utf-8 -*- from __future__ import unicode_literals from django.shortcuts import render, redirect from models import User, Task from django.contrib import messages from datetime import datetime def index(req): return render(req, \"appointments_app/index.html\") def register(req): user = User.userManager.register(req.POST) if user[\"logged_in\"]: req.session[\"user\"] = { \"id\": user[\"user\"].id, \"name\": user[\"user\"].name } return redirect('/appointments') else: for error in user[\"errors\"]: messages.add_message(req, messages.ERROR, error) return redirect('/') def login(req): user = User.userManager.login(req.POST) if user[\"logged_in\"]: req.session[\"user\"] = { \"id\": user[\"user\"].id, \"name\": user[\"user\"].name } return redirect('/appointments') else: for error in user[\"errors\"]: messages.add_message(req, messages.ERROR, error) return redirect('/') def logout(req): req.session.clear() return redirect('/') def appointments(req): if \"user\" not in req.session: messages.add_message(req, messages.ERROR, \"You must login first!\") return redirect(\"/\") appointments = Task.taskManager.filter(user_id=req.session[\"user\"][\"id\"]).order_by(\"when\") context = { \"todays_appointments\": [a for a in appointments if a.when.date() == datetime.now().date()], \"other_appointments\": [a for a in appointments if a.when.date() > datetime.now().date()] } return render(req, \"appointments_app/appointments.html\", context) def add(req): task = Task.taskManager.addTask(req.POST, req.session[\"user\"][\"id\"]) if not task[\"saved\"]: for error in task[\"errors\"]: messages.add_message(req, messages.ERROR, error) return redirect(\"/appointments\") def edit(req, id): if \"user\" not in req.session: messages.add_message(req, messages.ERROR, \"You must login first!\") return redirect(\"/\") return render(req, \"appointments_app/edit.html\", {\"appointment\":Task.taskManager.get(id=id)}) def update(req, id): task = Task.taskManager.updateTask(req.POST, req.session[\"user\"][\"id\"], id) if not task[\"saved\"]: for error in task[\"errors\"]: messages.add_message(req, messages.ERROR, error) return redirect(\"/appointments/{}\".format(id)) return redirect(\"/appointments\") def delete(req, id): Task.taskManager.get(id=id).delete() return redirect(\"/appointments\")",
		"hash": "e5d4ebc3fb5e1525e2b03d35eb102ee1beab77f87cf7d02b92f55334a161605a59bc575159e2450ede3d38f86d74ee5fe77a281c894c24d5d4cadf56306b958f"
	},
	"appointments/apps/appointment_app/tests.py": {
		"raw": "",
		"hash": "cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e"
	},
	"appointments/manage.py": {
		"raw": "#!/usr/bin/env python import os import sys if __name__ == \"__main__\": os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"appointments.settings\") try: from django.core.management import execute_from_command_line except ImportError: # The above import may fail for some other reason. Ensure that the # issue is really that Django is missing to avoid masking other # exceptions on Python 2. try: import django except ImportError: raise ImportError( \"Couldn't import Django. Are you sure it's installed and \" \"available on your PYTHONPATH environment variable? Did you \" \"forget to activate a virtual environment?\" ) raise execute_from_command_line(sys.argv)",
		"hash": "bf10b1bbd47468995527066b81a16aca8671e762baf359fb617c8f5763bd02ef9388911bf19cd9fceca1eba13c9d0664ff5305a377ba9374403859b61e0a43ad"
	}
}