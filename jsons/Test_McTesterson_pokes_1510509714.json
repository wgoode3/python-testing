{
	"project": "pokes",
	"student": {
		"first_name": "Test",
		"last_name": "McTesterson"
	},
	"pokes/pokes/urls.py": {
		"raw": "\"\"\"pokes URL Configuration The `urlpatterns` list routes URLs to views. For more information please see: https://docs.djangoproject.com/en/1.11/topics/http/urls/ Examples: Function views 1. Add an import: from my_app import views 2. Add a URL to urlpatterns: url(r'^$', views.home, name='home') Class-based views 1. Add an import: from other_app.views import Home 2. Add a URL to urlpatterns: url(r'^$', Home.as_view(), name='home') Including another URLconf 1. Import the include() function: from django.conf.urls import url, include 2. Add a URL to urlpatterns: url(r'^blog/', include('blog.urls')) \"\"\" from django.conf.urls import url, include urlpatterns = [ url(r'^', include(\"apps.pokes_app.urls\")), ] ",
		"hash": "9f5edca8e9053defc5209fb985b2a1031cb9b8b3174e5497582549f9780d17529e782f4e49ff4819930903c6613d7d80bc45e5e6e3b6a76b9bded52ac0138506"
	},
	"pokes/pokes/wsgi.py": {
		"raw": "\"\"\" WSGI config for pokes project. It exposes the WSGI callable as a module-level variable named ``application``. For more information on this file, see https://docs.djangoproject.com/en/1.11/howto/deployment/wsgi/ \"\"\" import os from django.core.wsgi import get_wsgi_application os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"pokes.settings\") application = get_wsgi_application() ",
		"hash": "c8ebed0fa44f12a6627c5f43b7d5b2bd5859429f059cbf06820a94a4dd8ea28f6a5b0d6e50c68326f352fd4beceedcfc26a4cdad4c926e6605947fd8e5fe2fcf"
	},
	"pokes/pokes/settings.py": {
		"raw": "\"\"\" Django settings for pokes project. Generated by 'django-admin startproject' using Django 1.11.6. For more information on this file, see https://docs.djangoproject.com/en/1.11/topics/settings/ For the full list of settings and their values, see https://docs.djangoproject.com/en/1.11/ref/settings/ \"\"\" import os # Build paths inside the project like this: os.path.join(BASE_DIR, ...) BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__))) # Quick-start development settings - unsuitable for production # See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/ # SECURITY WARNING: keep the secret key used in production secret! SECRET_KEY = 'l&p^=k6o2hcxybo^yu)10qps^$#&a=s7ul#^g93p@tp0yd_rzj' # SECURITY WARNING: don't run with debug turned on in production! DEBUG = True ALLOWED_HOSTS = [] # Application definition INSTALLED_APPS = [ 'apps.pokes_app', 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', ] MIDDLEWARE = [ 'django.middleware.security.SecurityMiddleware', 'django.contrib.sessions.middleware.SessionMiddleware', 'django.middleware.common.CommonMiddleware', 'django.middleware.csrf.CsrfViewMiddleware', 'django.contrib.auth.middleware.AuthenticationMiddleware', 'django.contrib.messages.middleware.MessageMiddleware', 'django.middleware.clickjacking.XFrameOptionsMiddleware', ] ROOT_URLCONF = 'pokes.urls' TEMPLATES = [ { 'BACKEND': 'django.template.backends.django.DjangoTemplates', 'DIRS': [], 'APP_DIRS': True, 'OPTIONS': { 'context_processors': [ 'django.template.context_processors.debug', 'django.template.context_processors.request', 'django.contrib.auth.context_processors.auth', 'django.contrib.messages.context_processors.messages', ], }, }, ] WSGI_APPLICATION = 'pokes.wsgi.application' # Database # https://docs.djangoproject.com/en/1.11/ref/settings/#databases DATABASES = { 'default': { 'ENGINE': 'django.db.backends.sqlite3', 'NAME': os.path.join(BASE_DIR, 'db.sqlite3'), } } # Password validation # https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators AUTH_PASSWORD_VALIDATORS = [ { 'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator', }, { 'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator', }, { 'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator', }, { 'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator', }, ] # Internationalization # https://docs.djangoproject.com/en/1.11/topics/i18n/ LANGUAGE_CODE = 'en-us' TIME_ZONE = 'UTC' USE_I18N = True USE_L10N = True USE_TZ = True # Static files (CSS, JavaScript, Images) # https://docs.djangoproject.com/en/1.11/howto/static-files/ STATIC_URL = '/static/' ",
		"hash": "489672d59b7e86c5c2ba5585dfd4015084a79675c0309f584d3f15d0707af0df692b1bf07c95fcd6d865ae3d038910df602e20292d16958d7e27f8247991412e"
	},
	"pokes/apps/pokes_app/urls.py": {
		"raw": "from django.conf.urls import url from . import views urlpatterns = [ url(r'^$', views.index), url(r'^register$', views.register), url(r'^login$', views.login), url(r'^logout$', views.logout), url(r'^pokes$', views.pokes), url(r'^poke/(?P<id>\\d+)$', views.poke), ]",
		"hash": "e5444d27561fad008e13f501b1eb8d28be53887c340a1c7f53ed4172dc31a5daaee120614e150100be1ae358bfe6c0155bef5f9c22e8acd695b4abd8ee77e46b"
	},
	"pokes/apps/pokes_app/migrations/0003_auto_20171112_1509.py": {
		"raw": "# -*- coding: utf-8 -*- # Generated by Django 1.11.6 on 2017-11-12 15:09 from __future__ import unicode_literals from django.db import migrations import django.db.models.manager class Migration(migrations.Migration): dependencies = [ ('pokes_app', '0002_user_pokes'), ] operations = [ migrations.AlterModelManagers( name='poke', managers=[ ('pokeManager', django.db.models.manager.Manager()), ], ), ] ",
		"hash": "3de98116ad1974aa6b651d7cedb56ad3bbdf638787070604e87227ef4cc494810b9689a93e671f5a36abb47bc93f821fe3d26bf908979508ab93c7a60a469677"
	},
	"pokes/apps/pokes_app/migrations/0001_initial.py": {
		"raw": "# -*- coding: utf-8 -*- # Generated by Django 1.11.6 on 2017-11-12 14:53 from __future__ import unicode_literals from django.db import migrations, models import django.db.models.deletion import django.db.models.manager class Migration(migrations.Migration): initial = True dependencies = [ ] operations = [ migrations.CreateModel( name='Poke', fields=[ ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')), ('pokes', models.IntegerField()), ], ), migrations.CreateModel( name='User', fields=[ ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')), ('name', models.CharField(max_length=255)), ('alias', models.CharField(max_length=255)), ('email', models.CharField(max_length=255)), ('password', models.CharField(max_length=255)), ('date_of_birth', models.DateField(max_length=255)), ], managers=[ ('userManager', django.db.models.manager.Manager()), ], ), migrations.AddField( model_name='poke', name='pokee', field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='poked_by', to='pokes_app.User'), ), migrations.AddField( model_name='poke', name='poker', field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='poked_users', to='pokes_app.User'), ), ] ",
		"hash": "aefb39c053be167ecd19525590cc5017db236bac88c7d22cf78c7165ec1fe53d0bb0b7269324587f2cdb1b04d0d03cdd2459e47688bac87531f14f552b141241"
	},
	"pokes/apps/pokes_app/migrations/0002_user_pokes.py": {
		"raw": "# -*- coding: utf-8 -*- # Generated by Django 1.11.6 on 2017-11-12 15:04 from __future__ import unicode_literals from django.db import migrations, models class Migration(migrations.Migration): dependencies = [ ('pokes_app', '0001_initial'), ] operations = [ migrations.AddField( model_name='user', name='pokes', field=models.IntegerField(default=0), preserve_default=False, ), ] ",
		"hash": "71a6f1b68ae7e1802f407164d95830ce96dcabcc04b1c4711701e87cacc862e88051ab80c1e85c71ba2586a94767003ddc41502bf45552c4dda351a6a01312b3"
	},
	"pokes/apps/pokes_app/apps.py": {
		"raw": "# -*- coding: utf-8 -*- from __future__ import unicode_literals from django.apps import AppConfig class PokeAppConfig(AppConfig): name = 'poke_app' ",
		"hash": "4676a112fcfb9d9e01cb5d550301aef62927e87141cd6a719a82890fd29cd879a37c2cc11bafb51b658c86f08d1414564af4a3cc28dda9d540dd6ecee6f92638"
	},
	"pokes/apps/pokes_app/admin.py": {
		"raw": "# -*- coding: utf-8 -*- from __future__ import unicode_literals from django.contrib import admin # Register your models here. ",
		"hash": "76b0a5fa9b7702d7d92a3a76a622f57a2ddb69fa2aa14777079e25c915c0b863a86ca2b6a10b1289f1f7a22f20a3f2a2fc17e2e84347a450ea6404dcd4fc9211"
	},
	"pokes/apps/pokes_app/models.py": {
		"raw": "# -*- coding: utf-8 -*- from __future__ import unicode_literals from django.db import models from datetime import datetime import bcrypt import re EMAIL_REGEX = re.compile(r'^[a-zA-Z0-9.+_-]+@[a-zA-Z0-9._-]+\\.[a-zA-Z]+$') class UserManager(models.Manager): def register(self, data): response = { \"user\": None, \"logged_in\": False, \"errors\": [] } if len(data[\"name\"]) < 3: response[\"errors\"].append(\"Name must be 3 characters or longer!\") if len(data[\"alias\"]) < 3: response[\"errors\"].append(\"Alias must be 3 characters or longer!\") if len(data[\"email\"]) == 0: response[\"errors\"].append(\"Email is required!\") elif not EMAIL_REGEX.match(data[\"email\"]): response[\"errors\"].append(\"Invalid Email!\") elif len(User.userManager.filter(email=data[\"email\"])) > 0: response[\"errors\"].append(\"Email already in use!\") if len(data[\"password\"]) < 8: response[\"errors\"].append(\"Password must be 8 characters or longer!\") if data[\"password\"] != data[\"confirm_password\"]: response[\"errors\"].append(\"Confirm Password must match Password!\") if len(data[\"date_of_birth\"]) == 0: response[\"errors\"].append(\"Date of Birth is required!\") else: dob = datetime.strptime(data[\"date_of_birth\"], '%Y-%m-%d') if dob > datetime.now(): response[\"errors\"].append(\"Date of Birth must be in the past!\") if len(response[\"errors\"]) == 0: response[\"logged_in\"] = True response[\"user\"] = User.userManager.create( name=data[\"name\"], alias=data[\"alias\"], email=data[\"email\"], password=bcrypt.hashpw(data[\"password\"].encode(), bcrypt.gensalt()), date_of_birth=dob, pokes=0 ) return response def login(self, data): response = { \"user\": None, \"logged_in\": False, \"errors\": [] } if len(data[\"email\"]) == 0: response[\"errors\"].append(\"Email is required!\") elif not EMAIL_REGEX.match(data[\"email\"]): response[\"errors\"].append(\"Invalid email!\") if len(data[\"password\"]) < 8: response[\"errors\"].append(\"Password must be 8 characters or longer!\") if len(response[\"errors\"]) == 0: user = User.userManager.filter(email=data[\"email\"]) if len(user) > 0: if bcrypt.checkpw(data[\"password\"].encode(), user[0].password.encode()): response[\"logged_in\"] = True response[\"user\"] = user[0] else: response[\"errors\"].append(\"Incorrect Password!\") else: response[\"errors\"].append(\"Email not found!\") return response class User(models.Model): name = models.CharField(max_length=255) alias = models.CharField(max_length=255) email = models.CharField(max_length=255) password = models.CharField(max_length=255) date_of_birth = models.DateField(max_length=255) pokes = models.IntegerField() userManager = UserManager() class PokeManager(models.Manager): def poke(self, poker, pokee): poke = Poke.pokeManager.filter(poker_id=poker, pokee_id=pokee) if len(poke) < 1: poke = Poke.pokeManager.create(pokes=1, poker_id=poker, pokee_id=pokee) else: poke[0].pokes += 1 poke[0].save() pokee = User.userManager.get(id=pokee) pokee.pokes += 1 pokee.save() return True class Poke(models.Model): pokes = models.IntegerField() poker = models.ForeignKey(User, related_name=\"poked_users\") pokee = models.ForeignKey(User, related_name=\"poked_by\") pokeManager = PokeManager()",
		"hash": "b0118bebaf16ce16835163238e140ab47d5f8da9204d7c4e1e1e4721fc4f1206ea08ec56c5ac5656fdb6e907384db8704fbd6674093234595c4b9cdf39fd33bc"
	},
	"pokes/apps/pokes_app/templates/pokes_app/index.html": {
		"raw": "<!DOCTYPE html> <html> <head> <title>Pokes</title> </head> <body> <h1>Welcome to Pokes</h1> <fieldset> <legend>Register</legend> <form action=\"/register\" method=\"post\"> {% csrf_token %} Name: <input type=\"text\" name=\"name\" placeholder=\"name\"><br> Alias: <input type=\"text\" name=\"alias\" placeholder=\"alias\"><br> Email: <input type=\"text\" name=\"email\" placeholder=\"email\"><br> Password: <input type=\"password\" name=\"password\" placeholder=\"password\"><br> Confirm Password: <input type=\"password\" name=\"confirm_password\" placeholder=\"confirm password\"><br> Date of Birth: <input type=\"date\" name=\"date_of_birth\"><br> <input type=\"submit\" value=\"Register\"> </form> </fieldset> <fieldset> <legend>Login</legend> <form action=\"/login\" method=\"post\"> {% csrf_token %} Email: <input type=\"text\" name=\"email\" placeholder=\"email\"><br> Password: <input type=\"password\" name=\"password\" placeholder=\"password\"><br> <input type=\"submit\" value=\"Login\"> </form> </fieldset> {% if messages %} <ul> {% for message in messages %} <li>{{ message }}</li> {% endfor %} </ul> {% endif %} </body> </html>",
		"hash": "00f2aa71c7e932b2b05a898f8042a375eda8b6ef2bfb5430dc580dbaf83d685a7df92c23dd72dfcfc1e47ccb4a0614932f916af874ac5d785d55d4190b2a0fe5"
	},
	"pokes/apps/pokes_app/templates/pokes_app/pokes.html": {
		"raw": "<!DOCTYPE html> <html> <head> <title>Pokes</title> </head> <body> <a href='/logout'>Logout</a> <p>Welcome, {{ request.session.user.name }}!</p> <p>{{ pokes.count }} people have poked you!</p> <fieldset> <legend>Your pokes:</legend> <ul> {% if pokes.count > 0 %} {% for poke in pokes %} <li>{{ poke.poker.name }} poked you {{ poke.pokes }} time(s).</li> {% endfor %} {% else %} <li>You have no pokes.</li> {% endif %} </ul> </fieldset> <fieldset> <legend>People you can poke:</legend> {% if others.count > 0 %} <table border=1> <tr> <th>Name</th> <th>Alias</th> <th>Email</th> <th>Poke History</th> <th>Action</th> </tr> {% for user in others %} <tr> <td>{{ user.name }}</td> <td>{{ user.alias }}</td> <td>{{ user.email }}</td> <td>{{ user.pokes }}</td> <td> <form action=\"/poke/{{user.id}}\" method=\"post\"> {% csrf_token %} <input type=\"submit\" value=\"poke\"> </form> </td> </tr> {% endfor %} </table> {% else %} <p>There are no other users.</p> {% endif %} </fieldset> </body> </html>",
		"hash": "a76b6ddb5a0dd5f1a2536e59301c42c7d820505c1b3a28293b4dc3d5095968dc673adf6eb8ca8d7225dbe27e55342b5f32f8ac858f7bd89c70c9714d894b2e88"
	},
	"pokes/apps/pokes_app/views.py": {
		"raw": "# -*- coding: utf-8 -*- from __future__ import unicode_literals from django.shortcuts import render, redirect from django.contrib import messages from .models import User, Poke def index(req): return render(req, \"pokes_app/index.html\") def register(req): user = User.userManager.register(req.POST) if user[\"logged_in\"]: req.session[\"user\"] = { \"id\": user[\"user\"].id, \"name\": user[\"user\"].name } return redirect('/pokes') else: for error in user[\"errors\"]: messages.add_message(req, messages.ERROR, error) return redirect('/') def login(req): user = User.userManager.login(req.POST) if user[\"logged_in\"]: req.session[\"user\"] = { \"id\": user[\"user\"].id, \"name\": user[\"user\"].name } return redirect('/pokes') else: for error in user[\"errors\"]: messages.add_message(req, messages.ERROR, error) return redirect('/') def logout(req): req.session.clear() return redirect('/') def pokes(req): if \"user\" not in req.session: messages.add_message(req, messages.ERROR, \"You must log in first!\") return redirect('/') context = { \"pokes\": Poke.pokeManager.filter(pokee_id=req.session[\"user\"][\"id\"]).order_by(\"-pokes\"), \"others\": User.userManager.all().exclude(id=req.session[\"user\"][\"id\"]) } return render(req, \"pokes_app/pokes.html\", context) def poke(req, id): Poke.pokeManager.poke(req.session[\"user\"][\"id\"], id) return redirect('/pokes')",
		"hash": "2c892fd59ccc047d75315195a3c4f67c8248b9c99ac999f445890c1f4703d5ee3e672af6d0fc3349976860a2a2f3cdffa996e693d221ae1493bced019b4d3640"
	},
	"pokes/apps/pokes_app/tests.py": {
		"raw": "# -*- coding: utf-8 -*- from __future__ import unicode_literals from django.test import TestCase # Create your tests here. ",
		"hash": "acd332a668292ec16b96b2a852e413236e33f1672370d89e8d1353aabe18cf8af0311e2afee63c451710c154bf02594268bc8876f29ac69d2ba6f538b0f628ac"
	},
	"pokes/manage.py": {
		"raw": "#!/usr/bin/env python import os import sys if __name__ == \"__main__\": os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"pokes.settings\") try: from django.core.management import execute_from_command_line except ImportError: # The above import may fail for some other reason. Ensure that the # issue is really that Django is missing to avoid masking other # exceptions on Python 2. try: import django except ImportError: raise ImportError( \"Couldn't import Django. Are you sure it's installed and \" \"available on your PYTHONPATH environment variable? Did you \" \"forget to activate a virtual environment?\" ) raise execute_from_command_line(sys.argv) ",
		"hash": "a51586695c228c8ce696ec47d483d36aefd33b9c5a4fff6d4a081a014d102061ed3da98b5812e9cd227b4c4deb7a79c129bfe695b15a1eee92d891598fb74517"
	}
}