{
	"project": "login_registration",
	"student": {
		"first_name": "Test",
		"last_name": "McTesterson"
	},
	"login_registration/login_registration/urls.py": {
		"raw": "from django.conf.urls import url, include from django.contrib import admin urlpatterns = [ url(r'^', include('apps.lr.urls')), # There is just one app, so we want everything # to route to that specific app, hence just the # '^' with no closing '$' ] ",
		"hash": "1a746ac742e1eb536fa7331ed645c330d1ef1a635da79ecd6294f9b00abafc9b895e90f778bf9b2acc8e9a10b1bf47eddad9ee48c7be07e7a6c946d1cdcaef0b"
	},
	"login_registration/login_registration/wsgi.py": {
		"raw": "\"\"\" WSGI config for login_registration project. It exposes the WSGI callable as a module-level variable named ``application``. For more information on this file, see https://docs.djangoproject.com/en/1.10/howto/deployment/wsgi/ \"\"\" import os from django.core.wsgi import get_wsgi_application os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"login_registration.settings\") application = get_wsgi_application() ",
		"hash": "512245348f9939ed34a202a628d3fa9b63707fcccedb76eb252a86df0535346137fd81b661d7eb3f59869a95a0083f9292abbc93e675078dc4254597ce1ff866"
	},
	"login_registration/login_registration/settings.py": {
		"raw": "\"\"\" Django settings for login_registration project. Generated by 'django-admin startproject' using Django 1.10. For more information on this file, see https://docs.djangoproject.com/en/1.10/topics/settings/ For the full list of settings and their values, see https://docs.djangoproject.com/en/1.10/ref/settings/ \"\"\" import os # Build paths inside the project like this: os.path.join(BASE_DIR, ...) BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__))) # Quick-start development settings - unsuitable for production # See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/ # SECURITY WARNING: keep the secret key used in production secret! SECRET_KEY = '35%$$9!u=p2=cshx6&1k(aar6r*=ak4)_l468j&=5n#&c68%ox' # SECURITY WARNING: don't run with debug turned on in production! DEBUG = True ALLOWED_HOSTS = [] # Application definition INSTALLED_APPS = [ 'apps.lr', 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', ] MIDDLEWARE = [ 'django.middleware.security.SecurityMiddleware', 'django.contrib.sessions.middleware.SessionMiddleware', 'django.middleware.common.CommonMiddleware', 'django.middleware.csrf.CsrfViewMiddleware', 'django.contrib.auth.middleware.AuthenticationMiddleware', 'django.contrib.messages.middleware.MessageMiddleware', 'django.middleware.clickjacking.XFrameOptionsMiddleware', ] ROOT_URLCONF = 'login_registration.urls' TEMPLATES = [ { 'BACKEND': 'django.template.backends.django.DjangoTemplates', 'DIRS': [], 'APP_DIRS': True, 'OPTIONS': { 'context_processors': [ 'django.template.context_processors.debug', 'django.template.context_processors.request', 'django.contrib.auth.context_processors.auth', 'django.contrib.messages.context_processors.messages', ], }, }, ] WSGI_APPLICATION = 'login_registration.wsgi.application' # Database # https://docs.djangoproject.com/en/1.10/ref/settings/#databases DATABASES = { 'default': { 'ENGINE': 'django.db.backends.sqlite3', 'NAME': os.path.join(BASE_DIR, 'db.sqlite3'), } } # Password validation # https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators AUTH_PASSWORD_VALIDATORS = [ { 'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator', }, { 'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator', }, { 'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator', }, { 'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator', }, ] # Internationalization # https://docs.djangoproject.com/en/1.10/topics/i18n/ LANGUAGE_CODE = 'en-us' TIME_ZONE = 'EST' USE_I18N = True USE_L10N = True USE_TZ = True # Static files (CSS, JavaScript, Images) # https://docs.djangoproject.com/en/1.10/howto/static-files/ STATIC_URL = '/static/' ",
		"hash": "4d47774424f87ba664bf2f3ba44410bb64dc3aff6c92367cc36a85ba83a2594df5837f02300b9d636b424776d355de6a52fab4f2f4311d93702f1aac85d59ebb"
	},
	"login_registration/apps/lr/urls.py": {
		"raw": "from django.conf.urls import url from . import views urlpatterns = [ url(r'^$', views.index), # Navigates to homepage # where there are login # and registration forms url(r'^login$', views.login), # Processes login with validations # Either proceeds to success page or # displays messages as dismissable alerts url(r'^register$', views.register), # Processes registration with validations # Either proceeds to success page or # displays messages as dismissable alerts url(r'^success$', views.success), # Displays a welcome message with user's # name and a back button ] ",
		"hash": "9d2e7b5264e8ad9bc9c756f7c03fe917dff501cb7f1bb8eeedd20951b3007092194d7edc64dc9c4df05f8379cab0da2d751dd8e5c4244381f7eba04dd876d214"
	},
	"login_registration/apps/lr/migrations/0001_initial.py": {
		"raw": "# -*- coding: utf-8 -*- # Generated by Django 1.10 on 2017-07-21 17:33 from __future__ import unicode_literals from django.db import migrations, models class Migration(migrations.Migration): initial = True dependencies = [ ] operations = [ migrations.CreateModel( name='User', fields=[ ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')), ('first_name', models.CharField(max_length=255)), ('last_name', models.CharField(max_length=255)), ('email', models.CharField(max_length=255)), ('password', models.CharField(max_length=255)), ('created_at', models.DateTimeField(auto_now_add=True)), ('updated_at', models.DateTimeField(auto_now=True)), ], ), ] ",
		"hash": "5d0d17578c000eaf42b7024ffa92a7319bf8869cfd6a292f5ecdce84121ca374d46994950421c346f4a1ef283733cd4e90df0301a0168c09a444f01adadfa279"
	},
	"login_registration/apps/lr/apps.py": {
		"raw": "from __future__ import unicode_literals from django.apps import AppConfig class LrConfig(AppConfig): name = 'lr' ",
		"hash": "b4d6ad5da6885cf5e254c87b85c33231ed00ff5b49ce9895f0211630ea9838c308b88304b0180903b70321621535d1d4cadec16f8e7e535a8635406ae3a57216"
	},
	"login_registration/apps/lr/admin.py": {
		"raw": "from django.contrib import admin # Register your models here. ",
		"hash": "39c71cb862651ce8ccc86603c2bebbbaa600f0c9de5a38c620b83e14b11acdf8799ab8f85363c5be63417490906ac9e051a2c8745c4d2c54236fcdd2a9fdd2bf"
	},
	"login_registration/apps/lr/models.py": {
		"raw": "from __future__ import unicode_literals from django.db import models import re import bcrypt class UserManager(models.Manager): def validator(self, postData): errors = {} if len(postData['fname']) < 2: errors['fnamelen'] = \"First name must be at least 2 characters.\" elif not re.match('[A-Za-z]+', postData['fname']): errors['fnamevalid'] = \"First name must only contain letters.\" if len(postData['lname']) < 2: errors['lnamelen'] = \"Last name must be at least 2 characters.\" elif not re.match('[A-Za-z]+', postData['lname']): errors['lnamevalid'] = \"Last name must only contain letters.\" if len(postData['email']) < 1: errors['emaillen'] = \"Email is required.\" elif not re.match('[A-Za-z-0-9-_]+(.[A-Za-z-0-9-_]+)*@[A-Za-z-0-9-_]+(.[A-Za-z-0-9-_]+)*(.[A-Za-z]{2,})', postData['email']): errors['emailvalid'] = \"Email is not valid.\" elif User.objects.filter(email=postData['email']): errors['emailtaken'] = \"Email was already registered.\" if len(postData['password']) < 8: errors['passlen'] = \"Password must be at least 8 characters.\" if postData['password'] != postData['conpass']: errors['passconpass'] = \"Passwords do not match.\" return errors # This is the registration validator. It runs when the site routes to the # '/register' page to determine if everything follows the validations and # whether to add user and to proceed to welcome page def loginvalidator(self, postData): errors = {} if len(postData['email']) < 1: errors['no_email'] = \"Please input an email.\" elif not re.match('[A-Za-z-0-9-_]+(.[A-Za-z-0-9-_]+)*@[A-Za-z-0-9-_]+(.[A-Za-z-0-9-_]+)*(.[A-Za-z]{2,})', postData['email']): errors['email_valid'] = \"Email is not valid.\" elif not User.objects.get(email=postData['email']): errors['email_exist'] = \"This email is not registered in our database.\" if len(postData['password']) < 1: errors['no_pass'] = \"Please input a password.\" elif len(postData['password']) < 8: errors['short_pass'] = \"Incorrect password: less than 8 characters.\" elif bcrypt.checkpw(postData['password'].encode(), User.objects.get(email=postData['email']).password.encode()) == False: errors['incorrect_pass'] = \"Incorrect password: does not match password stored in database.\" return errors # This is the login validator. It runs when the site routes to the # '/login' page after the user has submitted their information. # It determines if everything follows the validations and whether # to log in the user and present the welcome page class User(models.Model): first_name = models.CharField(max_length = 255) last_name = models.CharField(max_length = 255) email = models.CharField(max_length = 255) password = models.CharField(max_length = 255) created_at = models.DateTimeField(auto_now_add = True) updated_at = models.DateTimeField(auto_now = True) objects = UserManager() # This is the user class which allows us to add in user objects # with these specific attributes. ",
		"hash": "920f5371dfa539d9a8ef730515d3fd4974d9a378db111b122a8f808d1743ce885ad67e284152dd6ad5c86435a8021d2d9644be5fd5527008560634b0537dcccd"
	},
	"login_registration/apps/lr/templates/lr/index.html": {
		"raw": "<!DOCTYPE html> <html> <head> <meta charset=\"utf-8\"> <title>Login and Registration</title> {% load static %} <link rel=\"stylesheet\" href=\"{% static 'courses_app/bootstrap.min.css' %}\"> <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js\"></script> <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js\"></script> <style type=\"text/css\"> .errormessage{ background-color: gainsboro; border-radius: 7px; border: none; padding: 10px; margin: 2px; } </style> </head> <body> <nav class=\"navbar navbar-inverse\" data-spy=\"affix\" data-offset-top=\"197\"> <ul class=\"nav navbar-nav\"> <li class=\"active\"><a href=\"#\">Welcome</a></li> <li><a href=\"#\">Login</a></li> <li><a href=\"#\">Register</a></li> </ul> </nav> <div class = \"col-sm-offset-4 col-sm-4\"> <div class=\"form-horizontal\"> <h2>Login</h2> <form class=\"\" action=\"/login\" method=\"post\"> {% csrf_token %} Email: <input class = \"form-control\" type=\"text\" name=\"email\" placeholder=\"Registered email here...\"><br> <div> {% if messages %} {% for message in messages %} {% if 'no_email' in message.tags %} <div class=\"alert alert-danger alert-dismissable fade in\"> <a href=\"#\" class=\"close\" data-dismiss=\"alert\" aria-label=\"close\">&times;</a> <strong>Required field:</strong> {{ message}} </div> {% endif %} {% if 'email_valid' in message.tags %} <div class=\"alert alert-danger alert-dismissable fade in\"> <a href=\"#\" class=\"close\" data-dismiss=\"alert\" aria-label=\"close\">&times;</a> <strong>Required field:</strong> {{ message}} </div> {% endif %} {% if 'email_exist' in message.tags %} <div class=\"alert alert-danger alert-dismissable fade in\"> <a href=\"#\" class=\"close\" data-dismiss=\"alert\" aria-label=\"close\">&times;</a> <strong>Required field:</strong> {{ message}} </div> {% endif %} {% endfor %} {% endif %} </div> Password: <input class = \"form-control\" type=\"password\" name=\"password\"><br> <div> {% if messages %} {% for message in messages %} {% if 'no_pass' in message.tags %} <div class=\"alert alert-danger alert-dismissable fade in\"> <a href=\"#\" class=\"close\" data-dismiss=\"alert\" aria-label=\"close\">&times;</a> <strong>Required field:</strong> {{ message}} </div> {% endif %} {% if 'short_pass' in message.tags %} <div class=\"alert alert-danger alert-dismissable fade in\"> <a href=\"#\" class=\"close\" data-dismiss=\"alert\" aria-label=\"close\">&times;</a> <strong>Required field:</strong> {{ message}} </div> {% endif %} {% endfor %} {% endif %} </div> <input class = \"btn btn-info col-sm-offset-10\" type=\"submit\" name=\"Login\" value = \"Login\"> </form> </div> <div class=\"form-horizontal\"> <h2>Registration</h2> <form class=\"\" action=\"/register\" method=\"post\"> {% csrf_token %} First Name: <input class = \"form-control\" type=\"text\" name=\"fname\" placeholder=\"First name here...\"><br> <div> {% if messages %} {% for message in messages %} {% if 'fnamelen' in message.tags %} <div class=\"alert alert-danger alert-dismissable fade in\"> <a href=\"#\" class=\"close\" data-dismiss=\"alert\" aria-label=\"close\">&times;</a> <strong>Required field:</strong> {{ message}} </div> {% endif %} {% if 'fnamevalid' in message.tags %} <div class=\"alert alert-danger alert-dismissable fade in\"> <a href=\"#\" class=\"close\" data-dismiss=\"alert\" aria-label=\"close\">&times;</a> <strong>Required field:</strong> {{ message}} </div> {% endif %} {% endfor %} {% endif %} </div> Last Name: <input class = \"form-control\" type=\"text\" name=\"lname\" placeholder=\"Last name here...\"><br> <div> {% if messages %} {% for message in messages %} {% if 'lnamelen' in message.tags %} <div class=\"alert alert-danger alert-dismissable fade in\"> <a href=\"#\" class=\"close\" data-dismiss=\"alert\" aria-label=\"close\">&times;</a> <strong>Required field:</strong> {{ message}} </div> {% endif %} {% if 'lnamevalid' in message.tags %} <div class=\"alert alert-danger alert-dismissable fade in\"> <a href=\"#\" class=\"close\" data-dismiss=\"alert\" aria-label=\"close\">&times;</a> <strong>Required field:</strong> {{ message}} </div> {% endif %} {% endfor %} {% endif %} </div> Email: <input class = \"form-control\" type=\"text\" name=\"email\" placeholder=\"Email here...\"><br> <div> {% if messages %} {% for message in messages %} {% if 'emaillen' in message.tags %} <div class=\"alert alert-danger alert-dismissable fade in\"> <a href=\"#\" class=\"close\" data-dismiss=\"alert\" aria-label=\"close\">&times;</a> <strong>Required field:</strong> {{ message}} </div> {% endif %} {% if 'emailvalid' in message.tags %} <div class=\"alert alert-danger alert-dismissable fade in\"> <a href=\"#\" class=\"close\" data-dismiss=\"alert\" aria-label=\"close\">&times;</a> <strong>Required field:</strong> {{ message}} </div> {% endif %} {% if 'emailtaken' in message.tags %} <div class=\"alert alert-danger alert-dismissable fade in\"> <a href=\"#\" class=\"close\" data-dismiss=\"alert\" aria-label=\"close\">&times;</a> <strong>Required field:</strong> {{ message}} </div> {% endif %} {% endfor %} {% endif %} </div> Password: <input class = \"form-control\" type=\"password\" name=\"password\"><br> <div> {% if messages %} {% for message in messages %} {% if 'passlen' in message.tags %} <div class=\"alert alert-danger alert-dismissable fade in\"> <a href=\"#\" class=\"close\" data-dismiss=\"alert\" aria-label=\"close\">&times;</a> <strong>Required field:</strong> {{message}} </div> {% endif %} {% endfor %} {% endif %} </div> Confirm Password: <input class = \"form-control\" type=\"password\" name=\"conpass\"><br> <div> {% if messages %} {% for message in messages %} {% if 'passconpass' in message.tags %} <div class=\"alert alert-danger alert-dismissable fade in\"> <a href=\"#\" class=\"close\" data-dismiss=\"alert\" aria-label=\"close\">&times;</a> <strong>Required field:</strong> {{ message }} </div> {% endif %} {% endfor %} {% endif %} </div> <input class = \"btn btn-info col-sm-offset-10\" type=\"submit\" name=\"Register\" value = \"Register\"> </form> </div> </div> </body> </html> ",
		"hash": "677006c070f59a794dd2c66c0b75e2b32ec0aee1f2657416a3d2cce3e18ea1443f9694daa102189ea82c540d1bd551587ba974b7c0f4d522e92d961d27ce8da3"
	},
	"login_registration/apps/lr/templates/lr/success.html": {
		"raw": "<!DOCTYPE html> <html> <head> <meta charset=\"utf-8\"> <title>Success</title> {% load static %} <link rel=\"stylesheet\" href=\"{% static 'courses_app/bootstrap.min.css' %}\"> <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js\"></script> <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js\"></script> </head> <body class = \"col-sm-offset-5 col-sm-4\"> <h1>Welcome {{ request.session.name }}!</h1> <a href=\"/\"><button class = \"btn btn-info col-sm-offset-4\" type=\"button\" name=\"button\">Back</button></a> </body> </html> ",
		"hash": "2314a7afde4121fb0711651c6ad6bbc92de4be477ba0e00baa9afb40834bc68dfb170a599adebe07072d106ab82661a91a6acb4d93b8b456236309c2a7d6b8ee"
	},
	"login_registration/apps/lr/views.py": {
		"raw": "from django.shortcuts import render, redirect from django.contrib import messages from models import User, UserManager import bcrypt def index(request): return render(request, 'lr/index.html') # Simply renders the template for login/registration forms def login(request): errors = User.objects.loginvalidator(request.POST) if len(errors): for tag,error in errors.iteritems(): messages.error(request, error, extra_tags=tag) return redirect('/') else: request.session['name'] = User.objects.get(email=request.POST['email']).first_name return redirect('/success') # If there are errors, they will display as dismissable alerts # on the homepage, otherwise it will proceed and login in the user def register(request): errors = User.objects.validator(request.POST) if len(errors): for tag,error in errors.iteritems(): messages.error(request, error, extra_tags=tag) else: pwhash = bcrypt.hashpw(request.POST['password'].encode(), bcrypt.gensalt()) User.objects.create(first_name = request.POST['fname'], last_name = request.POST['lname'], email = request.POST['email'], password = pwhash) request.session['name'] = request.POST['fname'] return redirect('/success') return redirect('/') # If there are errors, they will display as dismissable alerts # on the homepage, otherwise it will proceed, add, and welcome the user def success(request): return render(request, 'lr/success.html') # Simply displays the welcome page once # a successful login or registration has # taken place ",
		"hash": "e312309a3d10a547f8de89b36e62019f73fb70d4768e5135297538bb750ea6b3e9bc938d5db7d9efac49f8f822c35e2bfb35322956ffe1538efdcb94d26bb0c6"
	},
	"login_registration/apps/lr/tests.py": {
		"raw": "from django.test import TestCase # Create your tests here. ",
		"hash": "b904f62ce6d0e22e2e75f91ee0f45dfe4e08d24c4f6675555dbc2d1d141c5089067381637601e7276b977ff68bcc367f33d53759bc95493c01a855537e8346bd"
	},
	"login_registration/manage.py": {
		"raw": "#!/usr/bin/env python import os import sys if __name__ == \"__main__\": os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"login_registration.settings\") try: from django.core.management import execute_from_command_line except ImportError: # The above import may fail for some other reason. Ensure that the # issue is really that Django is missing to avoid masking other # exceptions on Python 2. try: import django except ImportError: raise ImportError( \"Couldn't import Django. Are you sure it's installed and \" \"available on your PYTHONPATH environment variable? Did you \" \"forget to activate a virtual environment?\" ) raise execute_from_command_line(sys.argv) ",
		"hash": "e4ecc106e641193d638ad5b8f837e1b812272f347df9ecb47f29dfddc1a7746520f8dd24cc1122a0e78df34e60c00083f0d245096d1afe2f1ef78a845bb76e2f"
	}
}