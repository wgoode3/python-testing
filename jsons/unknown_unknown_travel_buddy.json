{
	"project": "travel_buddy",
	"student": {
		"first_name": "unknown",
		"last_name": "unknown"
	},
	"travel_buddy/travel_buddy/urls.py": {
		"raw": "\"\"\"travel_buddy URL Configuration The `urlpatterns` list routes URLs to views. For more information please see: https://docs.djangoproject.com/en/1.11/topics/http/urls/ Examples: Function views 1. Add an import: from my_app import views 2. Add a URL to urlpatterns: url(r'^$', views.home, name='home') Class-based views 1. Add an import: from other_app.views import Home 2. Add a URL to urlpatterns: url(r'^$', Home.as_view(), name='home') Including another URLconf 1. Import the include() function: from django.conf.urls import url, include 2. Add a URL to urlpatterns: url(r'^blog/', include('blog.urls')) \"\"\" from django.conf.urls import url, include urlpatterns = [ url(r'^', include(\"apps.travel_app.urls\")) ] "
	},
	"travel_buddy/travel_buddy/wsgi.py": {
		"raw": "\"\"\" WSGI config for travel_buddy project. It exposes the WSGI callable as a module-level variable named ``application``. For more information on this file, see https://docs.djangoproject.com/en/1.11/howto/deployment/wsgi/ \"\"\" import os from django.core.wsgi import get_wsgi_application os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"travel_buddy.settings\") application = get_wsgi_application() "
	},
	"travel_buddy/travel_buddy/settings.py": {
		"raw": "\"\"\" Django settings for travel_buddy project. Generated by 'django-admin startproject' using Django 1.11.6. For more information on this file, see https://docs.djangoproject.com/en/1.11/topics/settings/ For the full list of settings and their values, see https://docs.djangoproject.com/en/1.11/ref/settings/ \"\"\" import os # Build paths inside the project like this: os.path.join(BASE_DIR, ...) BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__))) # Quick-start development settings - unsuitable for production # See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/ # SECURITY WARNING: keep the secret key used in production secret! SECRET_KEY = '+*b*k1qn8zjb8-d52t5p*gvz8fq02spuagbxo)ues2g_lz)kv4' # SECURITY WARNING: don't run with debug turned on in production! DEBUG = True ALLOWED_HOSTS = [] # Application definition INSTALLED_APPS = [ 'apps.travel_app', 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', ] MIDDLEWARE = [ 'django.middleware.security.SecurityMiddleware', 'django.contrib.sessions.middleware.SessionMiddleware', 'django.middleware.common.CommonMiddleware', 'django.middleware.csrf.CsrfViewMiddleware', 'django.contrib.auth.middleware.AuthenticationMiddleware', 'django.contrib.messages.middleware.MessageMiddleware', 'django.middleware.clickjacking.XFrameOptionsMiddleware', ] ROOT_URLCONF = 'travel_buddy.urls' TEMPLATES = [ { 'BACKEND': 'django.template.backends.django.DjangoTemplates', 'DIRS': [], 'APP_DIRS': True, 'OPTIONS': { 'context_processors': [ 'django.template.context_processors.debug', 'django.template.context_processors.request', 'django.contrib.auth.context_processors.auth', 'django.contrib.messages.context_processors.messages', ], }, }, ] WSGI_APPLICATION = 'travel_buddy.wsgi.application' # Database # https://docs.djangoproject.com/en/1.11/ref/settings/#databases DATABASES = { 'default': { 'ENGINE': 'django.db.backends.sqlite3', 'NAME': os.path.join(BASE_DIR, 'db.sqlite3'), } } # Password validation # https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators AUTH_PASSWORD_VALIDATORS = [ { 'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator', }, { 'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator', }, { 'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator', }, { 'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator', }, ] # Internationalization # https://docs.djangoproject.com/en/1.11/topics/i18n/ LANGUAGE_CODE = 'en-us' TIME_ZONE = 'UTC' USE_I18N = True USE_L10N = True USE_TZ = True # Static files (CSS, JavaScript, Images) # https://docs.djangoproject.com/en/1.11/howto/static-files/ STATIC_URL = '/static/' "
	},
	"travel_buddy/apps/travel_app/urls.py": {
		"raw": "from django.conf.urls import url from . import views urlpatterns = [ url(r'^$', views.index), url(r'^register$', views.register), url(r'^login$', views.login), url(r'^logout$', views.logout), url(r'^travels$', views.travels), url(r'^travels/add$', views.new_trip), url(r'^add_trip$', views.add_trip), url(r'^travels/join/(?P<id>\\d+)$', views.join_trip), url(r'^travels/destination/(?P<id>\\d+)$', views.destination) ]"
	},
	"travel_buddy/apps/travel_app/migrations/0001_initial.py": {
		"raw": "# -*- coding: utf-8 -*- # Generated by Django 1.11.6 on 2017-11-01 15:33 from __future__ import unicode_literals from django.db import migrations, models import django.db.models.deletion import django.db.models.manager class Migration(migrations.Migration): initial = True dependencies = [ ] operations = [ migrations.CreateModel( name='Trip', fields=[ ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')), ('destination', models.CharField(max_length=255)), ('description', models.CharField(max_length=255)), ('start_date', models.DateField()), ('end_date', models.DateField()), ], managers=[ ('tripManager', django.db.models.manager.Manager()), ], ), migrations.CreateModel( name='User', fields=[ ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')), ('name', models.CharField(max_length=255)), ('username', models.CharField(max_length=255)), ('password', models.CharField(max_length=255)), ], managers=[ ('userManager', django.db.models.manager.Manager()), ], ), migrations.AddField( model_name='trip', name='attendees', field=models.ManyToManyField(related_name='attending', to='travel_app.User'), ), migrations.AddField( model_name='trip', name='planner', field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='planned', to='travel_app.User'), ), ] "
	},
	"travel_buddy/apps/travel_app/apps.py": {
		"raw": "# -*- coding: utf-8 -*- from __future__ import unicode_literals from django.apps import AppConfig class TravelAppConfig(AppConfig): name = 'travel_app' "
	},
	"travel_buddy/apps/travel_app/admin.py": {
		"raw": "# -*- coding: utf-8 -*- from __future__ import unicode_literals from django.contrib import admin # Register your models here. "
	},
	"travel_buddy/apps/travel_app/models.py": {
		"raw": "# -*- coding: utf-8 -*- from __future__ import unicode_literals from django.db import models from datetime import datetime import bcrypt class UserManager(models.Manager): def register(self, data): response = { \"user\": None, \"logged_in\": False, \"errors\": [] } if len(data[\"name\"]) < 3: response[\"errors\"].append(\"Name must be 3 characters or longer!\") if len(data[\"username\"]) < 3: response[\"errors\"].append(\"Username must be 3 characters or longer!\") elif len(User.userManager.filter(username=data[\"username\"])) > 0: response[\"errors\"].append(\"Username already in use!\") if len(data[\"password\"]) < 8: response[\"errors\"].append(\"Password must be 8 characters or longer!\") if data[\"password\"] != data[\"confirm_password\"]: response[\"errors\"].append(\"Confirm Password must match Password!\") if len(response[\"errors\"]) == 0: response[\"logged_in\"] = True response[\"user\"] = User.userManager.create( name=data[\"name\"], username=data[\"username\"], password=bcrypt.hashpw(data[\"password\"].encode(), bcrypt.gensalt()) ) return response def login(self, data): response = { \"user\": None, \"logged_in\": False, \"errors\": [] } if len(data[\"username\"]) < 3: response[\"errors\"].append(\"Username must be 3 characters or longer!\") if len(data[\"password\"]) < 8: response[\"errors\"].append(\"Password must be 8 characters or longer!\") if len(response[\"errors\"]) == 0: user = User.userManager.filter(username=data[\"username\"]) if len(user) > 0: if bcrypt.checkpw(data[\"password\"].encode(), user[0].password.encode()): response[\"logged_in\"] = True response[\"user\"] = user[0] else: response[\"errors\"].append(\"Incorrect Password!\") else: response[\"errors\"].append(\"Username not found!\") return response class User(models.Model): name = models.CharField(max_length=255) username = models.CharField(max_length=255) password = models.CharField(max_length=255) userManager = UserManager() class TripManager(models.Manager): def addTrip(self, data, id): errors = [] if len(data[\"destination\"]) < 1: errors.append(\"Destination is required!\") if len(data[\"description\"]) < 1: errors.append(\"Description is required!\") if len(data[\"start_date\"]) < 1: errors.append(\"Start Date is required!\") start = datetime.now() # assume now so we can run further tests else: start = datetime.strptime(data[\"start_date\"], \"%Y-%m-%d\") if datetime.now() > start: errors.append(\"Start Date must be in the future!\") if len(data[\"end_date\"]) < 1: errors.append(\"End Date is required!\") else: end = datetime.strptime(data[\"end_date\"], \"%Y-%m-%d\") if end < datetime.now(): errors.append(\"End Date must be in the future!\") elif start > end: errors.append(\"End Date must be after Start Date!\") if len(errors) > 0: return False, errors else: trip = Trip.tripManager.create( destination=data[\"destination\"], description=data[\"description\"], start_date=start, end_date=end, planner_id=id ) return True, trip class Trip(models.Model): destination = models.CharField(max_length=255) description = models.CharField(max_length=255) start_date = models.DateField() end_date = models.DateField() planner = models.ForeignKey(User, related_name=\"planned\") attendees = models.ManyToManyField(User, related_name=\"attending\") tripManager = TripManager()"
	},
	"travel_buddy/apps/travel_app/templates/travel_app/new_trip.html": {
		"raw": "<!DOCTYPE html> <html> <head> <title>Travel Buddy</title> </head> <body> <p><a href=\"/travels\">Home</a> | <a href=\"/logout\">Logout</a></p> <fieldset> <legend>Add a Trip</legend> <form action=\"/add_trip\" method=\"post\"> {% csrf_token %} Destination:<br><input type=\"text\" name=\"destination\" placeholder=\"destination\"><br> Description:<br><input type=\"text\" name=\"description\" placeholder=\"description\"><br> Start Date:<br><input type=\"date\" name=\"start_date\"><br> End Date:<br><input type=\"date\" name=\"end_date\"><br> <input type=\"submit\" value=\"Add a trip\"> </form> </fieldset> {% if messages %} <ul> {% for message in messages %} <li>{{ message }}</li> {% endfor %} </ul> {% endif %} </body> </html>"
	},
	"travel_buddy/apps/travel_app/templates/travel_app/destination.html": {
		"raw": "<!DOCTYPE html> <html> <head> <title>Travel Buddy</title> </head> <body> <p><a href=\"/travels\">Home</a> | <a href=\"/logout\">Logout</a></p> <fieldset> <legend>{{ trip.destination }}</legend> <p>Description: {{ trip.description }}</p> <p>Planned by: {{ trip.planner.name }}</p> <p>Start Date: {{ trip.start_date }}</p> <p>End Date: {{ trip.end_date }}</p> </fieldset> <fieldset> <legend>Other users going on the trip:</legend> <ul> {% if trip.attendees.all.count > 1 %} {% for user in trip.attendees.all %} {% if not user.id == trip.planner.id %} <li>{{ user.name }}</li> {% endif %} {% endfor %} {% else %} <p>There are no other users going on this trip.</p> {% endif %} </ul> </fieldset> </body> </html>"
	},
	"travel_buddy/apps/travel_app/templates/travel_app/travels.html": {
		"raw": "<!DOCTYPE html> <html> <head> <title>Travel Buddy</title> </head> <body> <h1>Welcome to Travel Buddy</h1> <p><a href=\"/logout\">Logout</a></p> <p>Hello, {{ request.session.user.name }}</p> <fieldset> <legend>Your Trips</legend> {% if joined_trips.count > 0 %} <table border=1> <tr> <th>Destination</th> <th>Start Date</th> <th>End Date</th> <th>Plan</th> </tr> {% for trip in joined_trips %} <tr> <td><a href=\"/travels/destination/{{ trip.id }}\">{{ trip.destination }}</a></td> <td>{{ trip.start_date }}</td> <td>{{ trip.end_date }}</td> <td>{{ trip.description }}</td> </tr> {% endfor %} </table> {% else %} <p>You haven't joined any trips.</p> {% endif %} </fieldset> <fieldset> <legend>Other Trips</legend> {% if all_trips.count > 0 %} <table border=1> <tr> <th>Planner</th> <th>Destination</th> <th>Start Date</th> <th>End Date</th> <th>Action</th> </tr> {% for trip in all_trips %} <tr> <td>{{ trip.planner.name }}</td> <td><a href=\"/travels/destination/{{ trip.id }}\">{{ trip.destination }}</a></td> <td>{{ trip.start_date }}</td> <td>{{ trip.end_date }}</td> <td> <form action=\"/travels/join/{{ trip.id }}\" method=\"post\"> {% csrf_token %} <input type=\"submit\" value=\"Join trip\"> </form> </td> </tr> {% endfor %} </table> {% else %} <p>There are no other trips.</p> {% endif %} </fieldset> <p><a href=\"/travels/add\">Add Travel Plan</a></p> </body> </html>"
	},
	"travel_buddy/apps/travel_app/templates/travel_app/index.html": {
		"raw": "<!DOCTYPE html> <html> <head> <title>Travel Buddy</title> </head> <body> <h1>Travel Buddy</h1> <fieldset> <legend>Register</legend> <form action=\"/register\" method=\"post\"> {% csrf_token %} Name: <input type=\"text\" name=\"name\" placeholder=\"name\"><br> Username: <input type=\"text\" name=\"username\" placeholder=\"username\"><br> Password: <input type=\"password\" name=\"password\" placeholder=\"password\"><br> Confirm Password: <input type=\"password\" name=\"confirm_password\" placeholder=\"confirm password\"><br> <input type=\"submit\" value=\"Register\"> </form> </fieldset> <fieldset> <legend>Login</legend> <form action=\"/login\" method=\"post\"> {% csrf_token %} Username: <input type=\"text\" name=\"username\" placeholder=\"username\"><br> Password: <input type=\"password\" name=\"password\" placeholder=\"password\"><br> <input type=\"submit\" value=\"Login\"> </form> </fieldset> {% if messages %} <ul> {% for message in messages %} <li>{{ message }}</li> {% endfor %} </ul> {% endif %} </body> </html>"
	},
	"travel_buddy/apps/travel_app/views.py": {
		"raw": "# -*- coding: utf-8 -*- from __future__ import unicode_literals from django.shortcuts import render, redirect from django.contrib import messages from .models import User, Trip def index(req): return render(req, \"travel_app/index.html\") def register(req): user = User.userManager.register(req.POST) if user[\"logged_in\"]: req.session[\"user\"] = { \"id\": user[\"user\"].id, \"name\": user[\"user\"].name } return redirect('/travels') else: for error in user[\"errors\"]: messages.add_message(req, messages.ERROR, error) return redirect('/') def login(req): user = User.userManager.login(req.POST) if user[\"logged_in\"]: req.session[\"user\"] = { \"id\": user[\"user\"].id, \"name\": user[\"user\"].name } return redirect('/travels') else: for error in user[\"errors\"]: messages.add_message(req, messages.ERROR, error) return redirect('/') def logout(req): req.session.clear() return redirect('/') def travels(req): all_trips = Trip.tripManager.all() joined_trips = User.userManager.get(id=req.session[\"user\"][\"id\"]).attending.all() for trip in joined_trips: all_trips = all_trips.exclude(id=trip.id) return render(req, \"travel_app/travels.html\", {\"all_trips\": all_trips, \"joined_trips\": joined_trips}) def new_trip(req): return render(req, \"travel_app/new_trip.html\") def add_trip(req): trip = Trip.tripManager.addTrip(req.POST, req.session[\"user\"][\"id\"]) if trip[0]: trip[1].attendees.add(User.userManager.get(id=req.session[\"user\"][\"id\"])) return redirect('/travels') else: for error in trip[1]: messages.add_message(req, messages.ERROR, error) return redirect(\"travels/add\") def join_trip(req, id): Trip.tripManager.get(id=id).attendees.add(User.userManager.get(id=req.session[\"user\"][\"id\"])) return redirect(\"/travels\") def destination(req, id): return render(req, \"travel_app/destination.html\", {\"trip\": Trip.tripManager.get(id=id)})"
	},
	"travel_buddy/apps/travel_app/tests.py": {
		"raw": "# -*- coding: utf-8 -*- from __future__ import unicode_literals from django.test import TestCase # Create your tests here. "
	},
	"travel_buddy/manage.py": {
		"raw": "#!/usr/bin/env python import os import sys if __name__ == \"__main__\": os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"travel_buddy.settings\") try: from django.core.management import execute_from_command_line except ImportError: # The above import may fail for some other reason. Ensure that the # issue is really that Django is missing to avoid masking other # exceptions on Python 2. try: import django except ImportError: raise ImportError( \"Couldn't import Django. Are you sure it's installed and \" \"available on your PYTHONPATH environment variable? Did you \" \"forget to activate a virtual environment?\" ) raise execute_from_command_line(sys.argv) "
	}
}