{
	"project": "wish_list",
	"student": {
		"first_name": "Test",
		"last_name": "McTesterson"
	},
	"wish_list/wish_list/urls.py": {
		"raw": "\"\"\"wish_list URL Configuration The `urlpatterns` list routes URLs to views. For more information please see: https://docs.djangoproject.com/en/1.11/topics/http/urls/ Examples: Function views 1. Add an import: from my_app import views 2. Add a URL to urlpatterns: url(r'^$', views.home, name='home') Class-based views 1. Add an import: from other_app.views import Home 2. Add a URL to urlpatterns: url(r'^$', Home.as_view(), name='home') Including another URLconf 1. Import the include() function: from django.conf.urls import url, include 2. Add a URL to urlpatterns: url(r'^blog/', include('blog.urls')) \"\"\" from django.conf.urls import url, include urlpatterns = [ url(r'^', include('apps.wish_list_app.urls')), ] ",
		"hash": "cbe04f1fcb08a0a125b2a97465ae62e80f71cc4bfeedf48d1eab7fe08687427daec12bac5b096c976ad400d601703b8715fe0ed629cc515ab6db114a1c75401b"
	},
	"wish_list/wish_list/wsgi.py": {
		"raw": "\"\"\" WSGI config for wish_list project. It exposes the WSGI callable as a module-level variable named ``application``. For more information on this file, see https://docs.djangoproject.com/en/1.11/howto/deployment/wsgi/ \"\"\" import os from django.core.wsgi import get_wsgi_application os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"wish_list.settings\") application = get_wsgi_application() ",
		"hash": "b4f37df88f2cd48cccab94344eaaaac2eed9c2f79c626a7b4c2cb1beff1950c2731d514b3832e174e4ec04fcc5a3c42ca21639a37cb11987927900a19e5a52ff"
	},
	"wish_list/wish_list/settings.py": {
		"raw": "\"\"\" Django settings for wish_list project. Generated by 'django-admin startproject' using Django 1.11.6. For more information on this file, see https://docs.djangoproject.com/en/1.11/topics/settings/ For the full list of settings and their values, see https://docs.djangoproject.com/en/1.11/ref/settings/ \"\"\" import os # Build paths inside the project like this: os.path.join(BASE_DIR, ...) BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__))) # Quick-start development settings - unsuitable for production # See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/ # SECURITY WARNING: keep the secret key used in production secret! SECRET_KEY = '8(^qeb_ns$)r#ed*8mio41(sioh5+u#-o^mgnxfoqmg9ml1v&l' # SECURITY WARNING: don't run with debug turned on in production! DEBUG = True ALLOWED_HOSTS = [] # Application definition INSTALLED_APPS = [ 'apps.wish_list_app', 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', ] MIDDLEWARE = [ 'django.middleware.security.SecurityMiddleware', 'django.contrib.sessions.middleware.SessionMiddleware', 'django.middleware.common.CommonMiddleware', 'django.middleware.csrf.CsrfViewMiddleware', 'django.contrib.auth.middleware.AuthenticationMiddleware', 'django.contrib.messages.middleware.MessageMiddleware', 'django.middleware.clickjacking.XFrameOptionsMiddleware', ] ROOT_URLCONF = 'wish_list.urls' TEMPLATES = [ { 'BACKEND': 'django.template.backends.django.DjangoTemplates', 'DIRS': [], 'APP_DIRS': True, 'OPTIONS': { 'context_processors': [ 'django.template.context_processors.debug', 'django.template.context_processors.request', 'django.contrib.auth.context_processors.auth', 'django.contrib.messages.context_processors.messages', ], }, }, ] WSGI_APPLICATION = 'wish_list.wsgi.application' # Database # https://docs.djangoproject.com/en/1.11/ref/settings/#databases DATABASES = { 'default': { 'ENGINE': 'django.db.backends.sqlite3', 'NAME': os.path.join(BASE_DIR, 'db.sqlite3'), } } # Password validation # https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators AUTH_PASSWORD_VALIDATORS = [ { 'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator', }, { 'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator', }, { 'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator', }, { 'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator', }, ] # Internationalization # https://docs.djangoproject.com/en/1.11/topics/i18n/ LANGUAGE_CODE = 'en-us' TIME_ZONE = 'UTC' USE_I18N = True USE_L10N = True USE_TZ = True # Static files (CSS, JavaScript, Images) # https://docs.djangoproject.com/en/1.11/howto/static-files/ STATIC_URL = '/static/' ",
		"hash": "79a00041cd201ae95a5e4891da81bc2fd512ce5e589b7217f2a915cb934043effa2341546d0b4851e0cc6ec327c7bef352abc3340fa0c407b042e1ff1cd32e5f"
	},
	"wish_list/apps/wish_list_app/urls.py": {
		"raw": "from django.conf.urls import url from . import views urlpatterns = [ url(r'^$', views.index), url(r'^register$', views.register), url(r'^login$', views.login), url(r'^logout$', views.logout), url(r'^dashboard$', views.dashboard), url(r'^wish_items/create$', views.new), url(r'^add_wish$', views.create), url(r'^wish_items/(?P<id>\\d+)$', views.wish), url(r'^wish_items/(?P<id>\\d+)/add$', views.add), url(r'^wish_items/(?P<id>\\d+)/remove$', views.remove), url(r'^wish_items/(?P<id>\\d+)/delete$', views.delete) ]",
		"hash": "4e692ee9d0713d16d10fed3eb0ac60bd8224ce9eeb464dd165c717ec53866f686c4ff52c22c4d5d81be85a6ad44373e2d98e731300ded8f5bee6ed9381428810"
	},
	"wish_list/apps/wish_list_app/migrations/0002_wish_created_at.py": {
		"raw": "# -*- coding: utf-8 -*- # Generated by Django 1.11.6 on 2017-11-12 22:31 from __future__ import unicode_literals from django.db import migrations, models import django.utils.timezone class Migration(migrations.Migration): dependencies = [ ('wish_list_app', '0001_initial'), ] operations = [ migrations.AddField( model_name='wish', name='created_at', field=models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now), preserve_default=False, ), ] ",
		"hash": "e9c132555cead610497b9e9c372102d75a5fa04e2f6e864e4807c78833ada2a46fc69fd15a315326cdb62ac8e4cb1a9dc087890a9a79a1db22fbe9938cb32643"
	},
	"wish_list/apps/wish_list_app/migrations/0001_initial.py": {
		"raw": "# -*- coding: utf-8 -*- # Generated by Django 1.11.6 on 2017-11-12 21:57 from __future__ import unicode_literals from django.db import migrations, models import django.db.models.deletion import django.db.models.manager class Migration(migrations.Migration): initial = True dependencies = [ ] operations = [ migrations.CreateModel( name='User', fields=[ ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')), ('name', models.CharField(max_length=255)), ('alias', models.CharField(max_length=255)), ('email', models.CharField(max_length=255)), ('password', models.CharField(max_length=255)), ('date_of_birth', models.DateField(max_length=255)), ], managers=[ ('userManager', django.db.models.manager.Manager()), ], ), migrations.CreateModel( name='Wish', fields=[ ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')), ('product', models.CharField(max_length=255)), ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wishes', to='wish_list_app.User')), ('wishers', models.ManyToManyField(related_name='wish_list', to='wish_list_app.User')), ], managers=[ ('wishManager', django.db.models.manager.Manager()), ], ), ] ",
		"hash": "a149b6fbd330aa8b68b5bef011d461058595b1c3a89476990aac9a50cf03f6155bbbd1f68f852be671568617ce4249387c84a1a4e38c4b15af84ac2256e2f499"
	},
	"wish_list/apps/wish_list_app/apps.py": {
		"raw": "# -*- coding: utf-8 -*- from __future__ import unicode_literals from django.apps import AppConfig class WishListAppConfig(AppConfig): name = 'wish_list_app' ",
		"hash": "c4a8db8129233bea3fe8463254dde7684b1a9bf663173e9ac8deb418d7749fa1724943c3ac4a699e30bdecddf0aef56452bb20c3352e37fc0c1c35f1391b3d5c"
	},
	"wish_list/apps/wish_list_app/admin.py": {
		"raw": "# -*- coding: utf-8 -*- from __future__ import unicode_literals from django.contrib import admin # Register your models here. ",
		"hash": "76b0a5fa9b7702d7d92a3a76a622f57a2ddb69fa2aa14777079e25c915c0b863a86ca2b6a10b1289f1f7a22f20a3f2a2fc17e2e84347a450ea6404dcd4fc9211"
	},
	"wish_list/apps/wish_list_app/models.py": {
		"raw": "# -*- coding: utf-8 -*- from __future__ import unicode_literals from django.db import models from datetime import datetime import bcrypt import re EMAIL_REGEX = re.compile(r'^[a-zA-Z0-9.+_-]+@[a-zA-Z0-9._-]+\\.[a-zA-Z]+$') class UserManager(models.Manager): def register(self, data): response = { \"user\": None, \"logged_in\": False, \"errors\": [] } if len(data[\"name\"]) < 3: response[\"errors\"].append(\"Name must be 3 characters or longer!\") if len(data[\"alias\"]) < 3: response[\"errors\"].append(\"Alias must be 3 characters or longer!\") if len(data[\"email\"]) == 0: response[\"errors\"].append(\"Email is required!\") elif not EMAIL_REGEX.match(data[\"email\"]): response[\"errors\"].append(\"Invalid Email!\") elif len(User.userManager.filter(email=data[\"email\"])) > 0: response[\"errors\"].append(\"Email already in use!\") if len(data[\"password\"]) < 8: response[\"errors\"].append(\"Password must be 8 characters or longer!\") if data[\"password\"] != data[\"confirm_password\"]: response[\"errors\"].append(\"Confirm Password must match Password!\") if len(data[\"date_of_birth\"]) == 0: response[\"errors\"].append(\"Date of Birth is required!\") else: dob = datetime.strptime(data[\"date_of_birth\"], '%Y-%m-%d') if dob > datetime.now(): response[\"errors\"].append(\"Date of Birth must be in the past!\") if len(response[\"errors\"]) == 0: response[\"logged_in\"] = True response[\"user\"] = User.userManager.create( name=data[\"name\"], alias=data[\"alias\"], email=data[\"email\"], password=bcrypt.hashpw(data[\"password\"].encode(), bcrypt.gensalt()), date_of_birth=dob ) return response def login(self, data): response = { \"user\": None, \"logged_in\": False, \"errors\": [] } if len(data[\"email\"]) == 0: response[\"errors\"].append(\"Email is required!\") elif not EMAIL_REGEX.match(data[\"email\"]): response[\"errors\"].append(\"Invalid email!\") if len(data[\"password\"]) < 8: response[\"errors\"].append(\"Password must be 8 characters or longer!\") if len(response[\"errors\"]) == 0: user = User.userManager.filter(email=data[\"email\"]) if len(user) > 0: if bcrypt.checkpw(data[\"password\"].encode(), user[0].password.encode()): response[\"logged_in\"] = True response[\"user\"] = user[0] else: response[\"errors\"].append(\"Incorrect Password!\") else: response[\"errors\"].append(\"Email not found!\") return response class User(models.Model): name = models.CharField(max_length=255) alias = models.CharField(max_length=255) email = models.CharField(max_length=255) password = models.CharField(max_length=255) date_of_birth = models.DateField(max_length=255) userManager = UserManager() class WishManager(models.Manager): def makeWish(self, product, creator): if len(product) < 1: return False, \"Product is required!\" elif len(product) < 3: return False, \"Product must be 3 characters or more!\" else: wish = Wish.wishManager.create(product=product, creator_id=creator) wish.wishers.add(User.userManager.get(id=creator)) wish.save() return True, wish def addWish(self, product, wisher): wish = Wish.wishManager.get(id=product) wish.wishers.add(User.userManager.get(id=wisher)) wish.save() def removeWish(self, product, wisher): wish = Wish.wishManager.get(id=product) wish.wishers.remove(User.userManager.get(id=wisher)) wish.save() class Wish(models.Model): product = models.CharField(max_length=255) creator = models.ForeignKey(User, related_name=\"wishes\") wishers = models.ManyToManyField(User, related_name=\"wish_list\") created_at = models.DateTimeField(auto_now_add=True) wishManager = WishManager()\\",
		"hash": "b5e6f50467d6302e507fd370d729e5c26f9978d192b56f220eb2b04223022ac57937409f1f38fe22fe07039420e195a1054bc15f9b6d85dcf742a54d6f7a4c11"
	},
	"wish_list/apps/wish_list_app/templates/wish_list_app/dashboard.html": {
		"raw": "<!DOCTYPE html> <html> <head> <title>Wish List</title> </head> <body> <a href=\"/logout\">Logout</a> <p>Hello, {{ request.session.user.name }}!</p> <fieldset> <legend>Your wishlist:</legend> {% if your_wishes.count > 0 %} <table border=1> <tr> <th>Item/Product</th> <th>Added By</th> <th>Date Added</th> <th>Action</th> </tr> {% for wish in your_wishes %} <tr> <td><a href=\"/wish_items/{{wish.id}}\">{{ wish.product }}</a></td> <td>{{ wish.creator.name }}</td> <td>{{ wish.created_at.date }}</td> <td> {% if wish.creator.id == request.session.user.id %} <form action=\"wish_items/{{wish.id}}/delete\" method=\"post\"> {% csrf_token %} <input type=\"submit\" value=\"Delete\"> </form> {% else %} <form action=\"wish_items/{{wish.id}}/remove\" method=\"post\"> {% csrf_token %} <input type=\"submit\" value=\"Remove from my wishlist\"> </form> {% endif %} </td> </tr> {% endfor %} </table> {% else %} <p>You have no items in your wishlist.</p> {% endif %} </fieldset> <fieldset> <legend>Other users wished for items:</legend> {% if other_wishes.count > 0 %} <table border=1> <tr> <th>Item/Product</th> <th>Added By</th> <th>Date Added</th> <th>Action</th> </tr> {% for wish in other_wishes %} <tr> <td><a href=\"/wish_items/{{wish.id}}\">{{ wish.product }}</a></td> <td>{{ wish.creator.name }}</td> <td>{{ wish.created_at.date }}</td> <td> <form action=\"/wish_items/{{wish.id}}/add\" method=\"post\"> {% csrf_token %} <input type=\"submit\" value=\"Add to my wishlist\"> </form> </td> </tr> {% endfor %} </table> {% else %} <p>There are no other wish items.</p> {% endif %} </fieldset> <a href=\"/wish_items/create\">Add Item</a> </body> </html>",
		"hash": "1324fe4fe6eacad2586c53d186973fcb5046c61864ee81a91f471305b87b97c32aa8675f4507789c94966e78165ed8af86e428f2def33ea60ac2fe8a31f2c4ac"
	},
	"wish_list/apps/wish_list_app/templates/wish_list_app/wish_item.html": {
		"raw": "<!DOCTYPE html> <html> <head> <title>Wish List</title> </head> <body> <p><a href=\"/dashboard\">Home</a> | <a href=\"/logout\">Logout</a></p> <h3>{{ wish.product }}</h3> <fieldset> <legend>Users who added this product/item to their wishlist:</legend> <ul> {% for user in wish.wishers.all %} <li>{{ user.name }}</li> {% endfor %} </ul> </fieldset> </body> </html>",
		"hash": "9a8f12c8acef60a62f0ef7d3828e0147b6de27936a27fae1beeee010e5b9355ea92ee14ca4a2f31245f49833acaeab7515e52f7b1c1ddfebe3d8464d6436662b"
	},
	"wish_list/apps/wish_list_app/templates/wish_list_app/index.html": {
		"raw": "<!DOCTYPE html> <html> <head> <title>Wish List</title> </head> <body> <h1>Welcome to Wish List</h1> <fieldset> <legend>Register</legend> <form action=\"/register\" method=\"post\"> {% csrf_token %} Name: <input type=\"text\" name=\"name\" placeholder=\"name\"><br> Alias: <input type=\"text\" name=\"alias\" placeholder=\"alias\"><br> Email: <input type=\"text\" name=\"email\" placeholder=\"email\"><br> Password: <input type=\"password\" name=\"password\" placeholder=\"password\"><br> Confirm Password: <input type=\"password\" name=\"confirm_password\" placeholder=\"confirm password\"><br> Date of Birth: <input type=\"date\" name=\"date_of_birth\"><br> <input type=\"submit\" value=\"Register\"> </form> </fieldset> <fieldset> <legend>Login</legend> <form action=\"/login\" method=\"post\"> {% csrf_token %} Email: <input type=\"text\" name=\"email\" placeholder=\"email\"><br> Password: <input type=\"password\" name=\"password\" placeholder=\"password\"><br> <input type=\"submit\" value=\"Login\"> </form> </fieldset> {% if messages %} <ul> {% for message in messages %} <li>{{ message }}</li> {% endfor %} </ul> {% endif %} </body> </html>",
		"hash": "e1daf93dd099c4566f3bfc1ec425e5a61eca95b364a4822d52eed5d35aec5194d089ed79c2c03b0cd4613ba8482e5d04342c663494401626ee49babc085f09a8"
	},
	"wish_list/apps/wish_list_app/templates/wish_list_app/new_wish.html": {
		"raw": "<!DOCTYPE html> <html> <head> <title>Wish List</title> </head> <body> <p><a href=\"/dashboard\">Home</a> | <a href=\"/logout\">Logout</a></p> <fieldset> <legend>Create a new wish item</legend> <form action=\"/add_wish\" method=\"post\"> {% csrf_token %} Item/Product: <input type=\"text\" name=\"product\" placeholder=\"Item/Product\"><br> <input type=\"submit\" value=\"Add\"> </form> </fieldset> {% if messages %} <ul> {% for message in messages %} <li>{{ message }}</li> {% endfor %} </ul> {% endif %} </body> </html>",
		"hash": "282f9d5469cfe0d91f691980e3d66a2e4cc6f8d70de96cf77e1bab61382b36628d41cd287fde521c21387387de5a82d406fc8e15a8d8ed0da2c2281123e35837"
	},
	"wish_list/apps/wish_list_app/views.py": {
		"raw": "# -*- coding: utf-8 -*- from __future__ import unicode_literals from django.shortcuts import render, redirect from django.contrib import messages from .models import User, Wish def index(req): return render(req, 'wish_list_app/index.html') def register(req): user = User.userManager.register(req.POST) if user[\"logged_in\"]: req.session[\"user\"] = { \"id\": user[\"user\"].id, \"name\": user[\"user\"].name } return redirect('/dashboard') else: for error in user[\"errors\"]: messages.add_message(req, messages.ERROR, error) return redirect('/') def login(req): user = User.userManager.login(req.POST) if user[\"logged_in\"]: req.session[\"user\"] = { \"id\": user[\"user\"].id, \"name\": user[\"user\"].name } return redirect('/dashboard') else: for error in user[\"errors\"]: messages.add_message(req, messages.ERROR, error) return redirect('/') def logout(req): req.session.clear() return redirect('/') def dashboard(req): if \"user\" not in req.session: messages.add_message(req, messages.ERROR, \"You must login first!\") return redirect(\"/\") user_wishes = User.userManager.get(id=req.session[\"user\"][\"id\"]).wish_list.all() other_wishes = Wish.wishManager.all() for wish in user_wishes: other_wishes = other_wishes.exclude(id=wish.id) return render(req, 'wish_list_app/dashboard.html', {\"your_wishes\":user_wishes, \"other_wishes\": other_wishes}) def new(req): if \"user\" not in req.session: messages.add_message(req, messages.ERROR, \"You must login first!\") return redirect(\"/\") return render(req, 'wish_list_app/new_wish.html') def create(req): wish = Wish.wishManager.makeWish(req.POST[\"product\"], req.session[\"user\"][\"id\"]) if wish[0]: return redirect('/dashboard') else: messages.add_message(req, messages.ERROR, wish[1]) return redirect('/wish_items/create') def wish(req, id): if \"user\" not in req.session: messages.add_message(req, messages.ERROR, \"You must login first!\") return redirect(\"/\") return render(req, 'wish_list_app/wish_item.html', {\"wish\": Wish.wishManager.get(id=id)}) def add(req, id): Wish.wishManager.addWish(id, req.session[\"user\"][\"id\"]) return redirect('/dashboard') def remove(req, id): Wish.wishManager.removeWish(id, req.session[\"user\"][\"id\"]) return redirect('/dashboard') def delete(req, id): Wish.wishManager.get(id=id).delete() return redirect('/dashboard')",
		"hash": "526b69a9ab262c0b587151f9dab60c0471f884c899e75338c7777892c4784bca8f65cc5eb48137efda475700e5edb8b316d3cfa7917f22f619f33755f7884c64"
	},
	"wish_list/apps/wish_list_app/tests.py": {
		"raw": "# -*- coding: utf-8 -*- from __future__ import unicode_literals from django.test import TestCase # Create your tests here.",
		"hash": "80b42d329a2bb345df1004c8ff0298ae1f94205567c134f5abd6aa95e1d656b92ead22593173f63d22d5349646073e7badc4e1ca7a6cd2fa140c25af21135c9d"
	},
	"wish_list/manage.py": {
		"raw": "#!/usr/bin/env python import os import sys if __name__ == \"__main__\": os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"wish_list.settings\") try: from django.core.management import execute_from_command_line except ImportError: # The above import may fail for some other reason. Ensure that the # issue is really that Django is missing to avoid masking other # exceptions on Python 2. try: import django except ImportError: raise ImportError( \"Couldn't import Django. Are you sure it's installed and \" \"available on your PYTHONPATH environment variable? Did you \" \"forget to activate a virtual environment?\" ) raise execute_from_command_line(sys.argv) ",
		"hash": "f833225623e4c19141ee88ad9d9f29791bca4825af3b8927b6f5b037b38d3b252ca3f9125abfa85297ff1cf97a9bc41dbc87ec612733c9d4dedce25ab80bafd9"
	}
}