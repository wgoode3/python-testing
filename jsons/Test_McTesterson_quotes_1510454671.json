{
	"project": "quotes",
	"student": {
		"first_name": "Test",
		"last_name": "McTesterson"
	},
	"quotes/apps/quotes_app/urls.py": {
		"raw": "from django.conf.urls import url from . import views urlpatterns = [ url(r'^$', views.index), url(r'^register$', views.register), url(r'^login$', views.login), url(r'^logout$', views.logout), url(r'^quotes$', views.quotes), url(r'^add_quote$', views.addQuote), url(r'^user/(?P<id>\\d+)$', views.showUser), url(r'^quote/(?P<id>\\d+)/favorite$', views.favorite), url(r'^quote/(?P<id>\\d+)/unfavorite$', views.unfavorite) ]",
		"hash": "d1d0616f6a2184f6d6fd45322d08af3b9a51880a814272172950401eecf2dea613293ddc920370334258b7420f61194bb39a053c101e4fe1103afecfa96fcce2"
	},
	"quotes/apps/quotes_app/migrations/0001_initial.py": {
		"raw": "# -*- coding: utf-8 -*- # Generated by Django 1.11.5 on 2017-11-01 00:32 from __future__ import unicode_literals from django.db import migrations, models import django.db.models.deletion import django.db.models.manager class Migration(migrations.Migration): initial = True dependencies = [ ] operations = [ migrations.CreateModel( name='Quote', fields=[ ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')), ('quoted_by', models.CharField(max_length=255)), ('message', models.CharField(max_length=255)), ], managers=[ ('quoteManager', django.db.models.manager.Manager()), ], ), migrations.CreateModel( name='User', fields=[ ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')), ('name', models.CharField(max_length=255)), ('alias', models.CharField(max_length=255)), ('email', models.CharField(max_length=255)), ('password', models.CharField(max_length=255)), ('date_of_birth', models.DateField(max_length=255)), ], managers=[ ('userManager', django.db.models.manager.Manager()), ], ), migrations.AddField( model_name='quote', name='favorites', field=models.ManyToManyField(related_name='favorite_quotes', to='quotes_app.User'), ), migrations.AddField( model_name='quote', name='poster', field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quotes', to='quotes_app.User'), ), ] ",
		"hash": "94579605ddd7ada504ab74cd7cf36ca52222492e7b6bc678b84cc1418f6356a3b205f5af5905cffea0fc983031313ed87ae778de6878a93e9207eea137ad8cc3"
	},
	"quotes/apps/quotes_app/apps.py": {
		"raw": "# -*- coding: utf-8 -*- from __future__ import unicode_literals from django.apps import AppConfig class QuotesAppConfig(AppConfig): name = 'quotes_app' ",
		"hash": "fb7197fc1c809146b88c995ddeb2632e02547d046ffcc72c7d97380ec375b3038d8293b477f6238935e09a943ec7b7a1a06d8a69bbd6bc3b9cbd73dc8946843f"
	},
	"quotes/apps/quotes_app/admin.py": {
		"raw": "# -*- coding: utf-8 -*- from __future__ import unicode_literals from django.contrib import admin # Register your models here. ",
		"hash": "76b0a5fa9b7702d7d92a3a76a622f57a2ddb69fa2aa14777079e25c915c0b863a86ca2b6a10b1289f1f7a22f20a3f2a2fc17e2e84347a450ea6404dcd4fc9211"
	},
	"quotes/apps/quotes_app/models.py": {
		"raw": "# -*- coding: utf-8 -*- from __future__ import unicode_literals from django.db import models from datetime import datetime import bcrypt import re EMAIL_REGEX = re.compile(r'^[a-zA-Z0-9.+_-]+@[a-zA-Z0-9._-]+\\.[a-zA-Z]+$') class UserManager(models.Manager): def register(self, data): response = { \"user\": None, \"logged_in\": False, \"errors\": [] } if len(data[\"name\"]) < 3: response[\"errors\"].append(\"Name must be 3 characters or longer!\") if len(data[\"alias\"]) < 3: response[\"errors\"].append(\"Alias must be 3 characters or longer!\") if len(data[\"email\"]) == 0: response[\"errors\"].append(\"Email is required!\") elif not EMAIL_REGEX.match(data[\"email\"]): response[\"errors\"].append(\"Invalid Email!\") elif len(User.userManager.filter(email=data[\"email\"])) > 0: response[\"errors\"].append(\"Email already in use!\") if len(data[\"password\"]) < 8: response[\"errors\"].append(\"Password must be 8 characters or longer!\") if data[\"password\"] != data[\"confirm_password\"]: response[\"errors\"].append(\"Confirm Password must match Password!\") if len(data[\"date_of_birth\"]) == 0: response[\"errors\"].append(\"Date of Birth is required!\") else: dob = datetime.strptime(data[\"date_of_birth\"], '%Y-%m-%d') if dob > datetime.now(): response[\"errors\"].append(\"Date of Birth must be in the past!\") if len(response[\"errors\"]) == 0: response[\"logged_in\"] = True response[\"user\"] = User.userManager.create( name=data[\"name\"], alias=data[\"alias\"], email=data[\"email\"], password=bcrypt.hashpw(data[\"password\"].encode(), bcrypt.gensalt()), date_of_birth=dob ) return response def login(self, data): response = { \"user\": None, \"logged_in\": False, \"errors\": [] } if len(data[\"email\"]) == 0: response[\"errors\"].append(\"Email is required!\") elif not EMAIL_REGEX.match(data[\"email\"]): response[\"errors\"].append(\"Invalid email!\") if len(data[\"password\"]) < 8: response[\"errors\"].append(\"Password must be 8 characters or longer!\") if len(response[\"errors\"]) == 0: user = User.userManager.filter(email=data[\"email\"]) if len(user) > 0: if bcrypt.checkpw(data[\"password\"].encode(), user[0].password.encode()): response[\"logged_in\"] = True response[\"user\"] = user[0] else: response[\"errors\"].append(\"Incorrect Password!\") else: response[\"errors\"].append(\"Email not found!\") return response class User(models.Model): name = models.CharField(max_length=255) alias = models.CharField(max_length=255) email = models.CharField(max_length=255) password = models.CharField(max_length=255) date_of_birth = models.DateField(max_length=255) userManager = UserManager() class QuoteManager(models.Manager): def addQuote(self, data, id): errors = [] if len(data[\"quoted_by\"]) < 3: errors.append(\"Quoted By must be 3 characters or longer!\") if len(data[\"message\"]) < 10: errors.append(\"Message must be 10 characters or longer!\") if len(errors) > 0: return False, errors else: return True, Quote.quoteManager.create(quoted_by=data[\"quoted_by\"], message=data[\"message\"], poster_id=id) class Quote(models.Model): quoted_by = models.CharField(max_length=255) message = models.CharField(max_length=255) poster = models.ForeignKey(User, related_name=\"quotes\") favorites = models.ManyToManyField(User, related_name=\"favorite_quotes\") quoteManager = QuoteManager()",
		"hash": "37a35477bc87ee7f437f1a7d84b09f3f9dcff0d4fb74ee818238f707f51b3226132dd42bc3cf3c1ec7779f49b53f11b092f1f9453b11947d1a849c986c6629b2"
	},
	"quotes/apps/quotes_app/templates/quotes_app/user.html": {
		"raw": "<!DOCTYPE html> <html> <head> <title>Quotes</title> </head> <body> <p><a href=\"/quotes\">Dashboard</a> | <a href=\"/logout\">Logout</a></p> <p>Posts by: {{ user.name }}</p> <p>Count: {{ user.quotes.count }} {% for quote in user.quotes.all %} <p><b>{{ quote.quoted_by }}</b>: {{ quote.message }}</p> {% endfor %} </body> </html>",
		"hash": "0d99af66a58df9ce4cd43716b3c6e6485f75cb4060198ebb6a2a8ce6647c30c356f4f9696ac27eef283b7439353e727ea7eabf548446a891420527572914e822"
	},
	"quotes/apps/quotes_app/templates/quotes_app/index.html": {
		"raw": "<!DOCTYPE html> <html> <head> <title>Quotes</title> </head> <body> <h1>Welcome to Quotes</h1> <fieldset> <legend>Register</legend> <form action=\"/register\" method=\"post\"> {% csrf_token %} Name: <input type=\"text\" name=\"name\" placeholder=\"name\"><br> Alias: <input type=\"text\" name=\"alias\" placeholder=\"alias\"><br> Email: <input type=\"text\" name=\"email\" placeholder=\"email\"><br> Password: <input type=\"password\" name=\"password\" placeholder=\"password\"><br> Confirm Password: <input type=\"password\" name=\"confirm_password\" placeholder=\"confirm password\"><br> Date of Birth: <input type=\"date\" name=\"date_of_birth\"><br> <input type=\"submit\" value=\"Register\"> </form> </fieldset> <fieldset> <legend>Login</legend> <form action=\"/login\" method=\"post\"> {% csrf_token %} Email: <input type=\"text\" name=\"email\" placeholder=\"email\"><br> Password: <input type=\"password\" name=\"password\" placeholder=\"password\"><br> <input type=\"submit\" value=\"Login\"> </form> </fieldset> {% if messages %} <ul> {% for message in messages %} <li>{{ message }}</li> {% endfor %} </ul> {% endif %} </body> </html>",
		"hash": "947af3bbea85643ce03cb3ccb00a94e2f07f5b5b8fd99a0431bce7421cf257b031057b85473c2a3ed668119d7b6f34e055679f16f0892e18d36c5037b4d89a70"
	},
	"quotes/apps/quotes_app/templates/quotes_app/quotes.html": {
		"raw": "<!DOCTYPE html> <html> <head> <title>Quotes</title> </head> <body> <h1>Welcome to Quotes</h1> <p><a href=\"/logout\">Logout</a></p> <p>Welcome back: {{ request.session.user.name }}</p> <fieldset> <legend>Quoteable Quotes</legend> {% if quotes.count > 0 %} {% for quote in quotes %} <fieldset> <p>Quoted by: {{ quote.quoted_by }}</p> <p>{{quote.message}}</p> <p>Posted by: <a href=\"/user/{{ quote.poster.id }}\">{{ quote.poster.alias }}</a></p> <form action=\"quote/{{quote.id}}/favorite\" method=\"post\"> {% csrf_token %} <input type=\"submit\" value=\"Add to my favorites\"> </form> </fieldset><br> {% endfor %} {% else %} <p>There are no quoteable quotes.</p> {% endif %} </fieldset> <fieldset> <legend>Favorited Quotes</legend> {% if favorite_quotes.count > 0 %} {% for quote in favorite_quotes %} <fieldset> <p>Quoted by: {{ quote.quoted_by }}</p> <p>{{quote.message}}</p> <p>Posted by: <a href=\"/user/{{ quote.poster.id }}\">{{ quote.poster.alias }}</a></p> <form action=\"quote/{{quote.id}}/unfavorite\" method=\"post\"> {% csrf_token %} <input type=\"submit\" value=\"Remove from my favorites\"> </form> </fieldset><br> {% endfor %} {% else %} <p>You have no favorite quotes.</p> {% endif %} </fieldset> <fieldset> <legend>Contribute a Quote</legend> <form action=\"/add_quote\" method=\"post\"> {% csrf_token %} Quoted By:<br><input type=\"text\" name=\"quoted_by\" placeholder=\"Quoted by\"><br> Message:<br><textarea name=\"message\" placeholder=\"Message\"></textarea><br> <input type=\"submit\" value=\"Contribute a quote\"> </form> </fieldset> {% if messages %} <ul> {% for message in messages %} <li>{{ message }}</li> {% endfor %} </ul> {% endif %} </body> </html>",
		"hash": "939f630c93381cd0c4388858dce2671a0568ac166a79f83402f757086991a15d5fc49129658426362b49c8caefa975cc800e58d63b3ee6628167ce402122fca4"
	},
	"quotes/apps/quotes_app/views.py": {
		"raw": "# -*- coding: utf-8 -*- from __future__ import unicode_literals from django.shortcuts import render, redirect from django.contrib import messages from .models import User, Quote def index(req): return render(req, \"quotes_app/index.html\") def register(req): user = User.userManager.register(req.POST) if user[\"logged_in\"]: req.session[\"user\"] = { \"id\": user[\"user\"].id, \"name\": user[\"user\"].name } return redirect('/quotes') else: for error in user[\"errors\"]: messages.add_message(req, messages.ERROR, error) return redirect('/') def login(req): user = User.userManager.login(req.POST) if user[\"logged_in\"]: req.session[\"user\"] = { \"id\": user[\"user\"].id, \"name\": user[\"user\"].name } return redirect('/quotes') else: for error in user[\"errors\"]: messages.add_message(req, messages.ERROR, error) return redirect('/') def logout(req): req.session.clear() return redirect('/') def quotes(req): if 'user' not in req.session: messages.add_message(req, messages.ERROR, \"You must log in first!\") all_quotes = Quote.quoteManager.all() favorite_quotes = User.userManager.get(id=req.session[\"user\"][\"id\"]).favorite_quotes.all() for quote in favorite_quotes: all_quotes = all_quotes.exclude(id=quote.id) return render(req, \"quotes_app/quotes.html\", {\"quotes\": all_quotes, \"favorite_quotes\": favorite_quotes}) def addQuote(req): quote = Quote.quoteManager.addQuote(req.POST, req.session[\"user\"][\"id\"]) if not quote[0]: for error in quote[1]: messages.add_message(req, messages.ERROR, error) else: quote[1].favorites.add(User.userManager.get(id=req.session[\"user\"][\"id\"])) return redirect(\"/quotes\") def showUser(req, id): return render(req, \"quotes_app/user.html\", {\"user\": User.userManager.get(id=req.session[\"user\"][\"id\"])}) def favorite(req, id): Quote.quoteManager.get(id=id).favorites.add(User.userManager.get(id=req.session[\"user\"][\"id\"])) return redirect(\"/quotes\") def unfavorite(req, id): Quote.quoteManager.get(id=id).favorites.remove(User.userManager.get(id=req.session[\"user\"][\"id\"])) return redirect(\"/quotes\")",
		"hash": "dd379c3d2542f85d0610325085ef431b814ca06c93bd05a6d50f84dc8089b5ef8e6a4db15618b7d2fcc923195217ebd8bc62ddc9f8e2dd78036f1890f3b14273"
	},
	"quotes/apps/quotes_app/tests.py": {
		"raw": "# -*- coding: utf-8 -*- from __future__ import unicode_literals from django.test import TestCase # Create your tests here.",
		"hash": "80b42d329a2bb345df1004c8ff0298ae1f94205567c134f5abd6aa95e1d656b92ead22593173f63d22d5349646073e7badc4e1ca7a6cd2fa140c25af21135c9d"
	},
	"quotes/manage.py": {
		"raw": "#!/usr/bin/env python import os import sys if __name__ == \"__main__\": os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"quotes.settings\") try: from django.core.management import execute_from_command_line except ImportError: # The above import may fail for some other reason. Ensure that the # issue is really that Django is missing to avoid masking other # exceptions on Python 2. try: import django except ImportError: raise ImportError( \"Couldn't import Django. Are you sure it's installed and \" \"available on your PYTHONPATH environment variable? Did you \" \"forget to activate a virtual environment?\" ) raise execute_from_command_line(sys.argv) ",
		"hash": "69a730de7fe6c51dbb19c33085b4ace8809fc90711def3d3ba1c13b8e007fe32ae8fe0c65885f32e3b564a7124da6cd53a0e1413f136d6e8955a38a2b3abd60a"
	},
	"quotes/quotes/urls.py": {
		"raw": "\"\"\"quotes URL Configuration The `urlpatterns` list routes URLs to views. For more information please see: https://docs.djangoproject.com/en/1.11/topics/http/urls/ Examples: Function views 1. Add an import: from my_app import views 2. Add a URL to urlpatterns: url(r'^$', views.home, name='home') Class-based views 1. Add an import: from other_app.views import Home 2. Add a URL to urlpatterns: url(r'^$', Home.as_view(), name='home') Including another URLconf 1. Import the include() function: from django.conf.urls import url, include 2. Add a URL to urlpatterns: url(r'^blog/', include('blog.urls')) \"\"\" from django.conf.urls import url, include urlpatterns = [ url(r'^', include(\"apps.quotes_app.urls\")) ]",
		"hash": "d3113c6ee05ed6257eea206d12ef79e484bbc9c73604f14171323ca0e9d3a624d90e02e8a4e8521d87192212b818bb33f55820ea123360ef8ebd3217e9717178"
	},
	"quotes/quotes/wsgi.py": {
		"raw": "\"\"\" WSGI config for quotes project. It exposes the WSGI callable as a module-level variable named ``application``. For more information on this file, see https://docs.djangoproject.com/en/1.11/howto/deployment/wsgi/ \"\"\" import os from django.core.wsgi import get_wsgi_application os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"quotes.settings\") application = get_wsgi_application() ",
		"hash": "48e2f229b4bc9ff96f85f6edc37d93744c2935e3895791df24a6af7f8c4a7294576e983d33f78b949f13cbab97dede6f58769f2c76caba50295ceceba037c89f"
	},
	"quotes/quotes/settings.py": {
		"raw": "\"\"\" Django settings for quotes project. Generated by 'django-admin startproject' using Django 1.11.5. For more information on this file, see https://docs.djangoproject.com/en/1.11/topics/settings/ For the full list of settings and their values, see https://docs.djangoproject.com/en/1.11/ref/settings/ \"\"\" import os # Build paths inside the project like this: os.path.join(BASE_DIR, ...) BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__))) # Quick-start development settings - unsuitable for production # See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/ # SECURITY WARNING: keep the secret key used in production secret! SECRET_KEY = '03u&se#h(7l21i(+)du4=&!nvhk)&0qi=0u5wj#%tp^6dk$@ck' # SECURITY WARNING: don't run with debug turned on in production! DEBUG = True ALLOWED_HOSTS = [] # Application definition INSTALLED_APPS = [ 'apps.quotes_app', 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', ] MIDDLEWARE = [ 'django.middleware.security.SecurityMiddleware', 'django.contrib.sessions.middleware.SessionMiddleware', 'django.middleware.common.CommonMiddleware', 'django.middleware.csrf.CsrfViewMiddleware', 'django.contrib.auth.middleware.AuthenticationMiddleware', 'django.contrib.messages.middleware.MessageMiddleware', 'django.middleware.clickjacking.XFrameOptionsMiddleware', ] ROOT_URLCONF = 'quotes.urls' TEMPLATES = [ { 'BACKEND': 'django.template.backends.django.DjangoTemplates', 'DIRS': [], 'APP_DIRS': True, 'OPTIONS': { 'context_processors': [ 'django.template.context_processors.debug', 'django.template.context_processors.request', 'django.contrib.auth.context_processors.auth', 'django.contrib.messages.context_processors.messages', ], }, }, ] WSGI_APPLICATION = 'quotes.wsgi.application' # Database # https://docs.djangoproject.com/en/1.11/ref/settings/#databases DATABASES = { 'default': { 'ENGINE': 'django.db.backends.sqlite3', 'NAME': os.path.join(BASE_DIR, 'db.sqlite3'), } } # Password validation # https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators AUTH_PASSWORD_VALIDATORS = [ { 'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator', }, { 'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator', }, { 'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator', }, { 'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator', }, ] # Internationalization # https://docs.djangoproject.com/en/1.11/topics/i18n/ LANGUAGE_CODE = 'en-us' TIME_ZONE = 'UTC' USE_I18N = True USE_L10N = True USE_TZ = True # Static files (CSS, JavaScript, Images) # https://docs.djangoproject.com/en/1.11/howto/static-files/ STATIC_URL = '/static/' ",
		"hash": "379de7895aa7267c34ab8f12804f0b24093a36d236d4510a25c40342dcc11ddaef617192e29af7c34b371f5483f32682fb70390533118bd76fb53055be38cbbd"
	}
}