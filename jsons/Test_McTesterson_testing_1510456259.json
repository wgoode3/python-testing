{
	"project": "testing",
	"student": {
		"first_name": "Test",
		"last_name": "McTesterson"
	},
	"testing/messages/urls.py": {
		"raw": "\"\"\"messages URL Configuration The `urlpatterns` list routes URLs to views. For more information please see: https://docs.djangoproject.com/en/1.10/topics/http/urls/ Examples: Function views 1. Add an import: from my_app import views 2. Add a URL to urlpatterns: url(r'^$', views.home, name='home') Class-based views 1. Add an import: from other_app.views import Home 2. Add a URL to urlpatterns: url(r'^$', Home.as_view(), name='home') Including another URLconf 1. Import the include() function: from django.conf.urls import url, include 2. Add a URL to urlpatterns: url(r'^blog/', include('blog.urls')) \"\"\" from django.conf.urls import url, include urlpatterns = [ url(r'^', include('apps.user_app.urls')), url(r'^', include('apps.message_app.urls')) ] ",
		"hash": "1405cc1dde4f996cced52eecbd9826616b328bf41aaa55c2fcadf7b63b5851cb524ce88b25057cbfaa008de0e30ce959c21398fcdd0113e01ce39fd1502689bd"
	},
	"testing/messages/wsgi.py": {
		"raw": "\"\"\" WSGI config for messages project. It exposes the WSGI callable as a module-level variable named ``application``. For more information on this file, see https://docs.djangoproject.com/en/1.10/howto/deployment/wsgi/ \"\"\" import os from django.core.wsgi import get_wsgi_application os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"messages.settings\") application = get_wsgi_application() ",
		"hash": "eac132dc5f60b494a689201d1211cf042c817d71d4795f7a5efcadb7ecb0598a2104f0fba879d741fe9e06e049ce06a03d69dc3465dfbcefa07ee1cc40aaf18d"
	},
	"testing/messages/settings.py": {
		"raw": "\"\"\" Django settings for messages project. Generated by 'django-admin startproject' using Django 1.10. For more information on this file, see https://docs.djangoproject.com/en/1.10/topics/settings/ For the full list of settings and their values, see https://docs.djangoproject.com/en/1.10/ref/settings/ \"\"\" import os # Build paths inside the project like this: os.path.join(BASE_DIR, ...) BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__))) # Quick-start development settings - unsuitable for production # See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/ # SECURITY WARNING: keep the secret key used in production secret! SECRET_KEY = 'yc^d$pu)51xznh+s(co_79%cw_@67xl^5j7=0zms)_tryur$1%' # SECURITY WARNING: don't run with debug turned on in production! DEBUG = True ALLOWED_HOSTS = [] # Application definition INSTALLED_APPS = [ 'apps.message_app', 'apps.user_app', 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', ] MIDDLEWARE = [ 'django.middleware.security.SecurityMiddleware', 'django.contrib.sessions.middleware.SessionMiddleware', 'django.middleware.common.CommonMiddleware', 'django.middleware.csrf.CsrfViewMiddleware', 'django.contrib.auth.middleware.AuthenticationMiddleware', 'django.contrib.messages.middleware.MessageMiddleware', 'django.middleware.clickjacking.XFrameOptionsMiddleware', ] ROOT_URLCONF = 'messages.urls' TEMPLATES = [ { 'BACKEND': 'django.template.backends.django.DjangoTemplates', 'DIRS': [], 'APP_DIRS': True, 'OPTIONS': { 'context_processors': [ 'django.template.context_processors.debug', 'django.template.context_processors.request', 'django.contrib.auth.context_processors.auth', 'django.contrib.messages.context_processors.messages', ], }, }, ] WSGI_APPLICATION = 'messages.wsgi.application' # Database # https://docs.djangoproject.com/en/1.10/ref/settings/#databases DATABASES = { 'default': { 'ENGINE': 'django.db.backends.sqlite3', 'NAME': os.path.join(BASE_DIR, 'db.sqlite3'), } } # Password validation # https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators AUTH_PASSWORD_VALIDATORS = [ { 'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator', }, { 'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator', }, { 'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator', }, { 'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator', }, ] # Internationalization # https://docs.djangoproject.com/en/1.10/topics/i18n/ LANGUAGE_CODE = 'en-us' TIME_ZONE = 'UTC' USE_I18N = True USE_L10N = True USE_TZ = True # Static files (CSS, JavaScript, Images) # https://docs.djangoproject.com/en/1.10/howto/static-files/ STATIC_URL = '/static/' ",
		"hash": "23689f749aa4343e11ed533aca30a86ce28a990e1b8c2271ae3891434818f547fbdf9c11a382ea4942d3a323679510c0b3ef9416c99c1b2d69f90f9ddbaded78"
	},
	"testing/apps/user_app/urls.py": {
		"raw": "from django.conf.urls import url from . import views urlpatterns = [ url(r'^register$', views.register, name='user_register'), url(r'^login$', views.login, name='user_login'), url(r'^logout$', views.logout, name='user_logout') ]",
		"hash": "a1f2ed11f5ab82e8c30fed6f95e1cd990d37fb33359e32745947e5f4f73ed09fbd9e65d3c7c14afc9aeae3befec3151ab84400692bc4854aa2a7ac7df9df12db"
	},
	"testing/apps/user_app/migrations/0001_initial.py": {
		"raw": "# -*- coding: utf-8 -*- # Generated by Django 1.10 on 2017-07-03 13:12 from __future__ import unicode_literals from django.db import migrations, models import django.db.models.manager class Migration(migrations.Migration): initial = True dependencies = [ ] operations = [ migrations.CreateModel( name='User', fields=[ ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')), ('username', models.CharField(max_length=255)), ('email', models.CharField(max_length=255)), ('password', models.CharField(max_length=255)), ('is_admin', models.BooleanField(default=False)), ('description', models.CharField(blank=True, max_length=255)), ('created_at', models.DateTimeField(auto_now_add=True)), ('updated_at', models.DateTimeField(auto_now=True)), ], managers=[ ('userManager', django.db.models.manager.Manager()), ], ), ] ",
		"hash": "344dd96386a782d8cb16cd0c5b1790a2687ef295e25d2ed0da6b4b6808e5d1f763e5dd37957d1022a856f738a64be1c045cd7455b1bc2d9632e26f9a2ea56f3b"
	},
	"testing/apps/user_app/apps.py": {
		"raw": "from __future__ import unicode_literals from django.apps import AppConfig class UserAppConfig(AppConfig): name = 'user_app' ",
		"hash": "c0b770d934b10479a6341e3f81244d9d8e03ba320c41ab5b8777594b40f09eed0721765f949a36417fc9daebf98320cf97729005ff6b72b2d2b4a92125d42963"
	},
	"testing/apps/user_app/admin.py": {
		"raw": "from django.contrib import admin # Register your models here. ",
		"hash": "39c71cb862651ce8ccc86603c2bebbbaa600f0c9de5a38c620b83e14b11acdf8799ab8f85363c5be63417490906ac9e051a2c8745c4d2c54236fcdd2a9fdd2bf"
	},
	"testing/apps/user_app/models.py": {
		"raw": "from __future__ import unicode_literals from django.db import models import bcrypt import re EMAIL_REGEX = re.compile(r'^[a-zA-Z0-9.+_-]+@[a-zA-Z0-9._-]+\\.[a-zA-Z]+$') # regex requires at least 1 number, capital letter, lower case letter, permits some special characters !@#$%^&*+= and must be 8 characters or longer PASSWORD_REGEX = re.compile(r'^(?=.*?\\d)(?=.*?[A-Z])(?=.*?[a-z])[A-Za-z\\d,!@#$%^&*+=]{8,}$') class UserManager(models.Manager): def register(self, username, email, password, confirm_password): messages = [] if len(username) < 1: messages.append('Username is required!') elif len(username) < 3: messages.append('Username must be 3 characters or more!') else: check = User.userManager.filter(username=username) if len(check) > 0: messages.append('Username already in use!') if len(email) < 1: messages.append('Email is required!') elif not EMAIL_REGEX.match(email): messages.append('Invalid Email!') else: check = User.userManager.filter(email=email.lower()) if len(check) > 0: messages.append('Email already in use!') if len(password) < 1: messages.append('Password is required!') elif not PASSWORD_REGEX.match(password): messages.append('Password must contain at least 1 number and capitalization!') if len(confirm_password) < 1: messages.append('Confirm password is required!') elif confirm_password != password: messages.append('Password must match Confirm password!') if len(messages) < 1: pw_hash = bcrypt.hashpw(password.encode(), bcrypt.gensalt()) user = User.userManager.create(username=username, email=email.lower(), password=pw_hash) return True, user else: return False, messages def login(self, email, password): messages = [] if len(email) < 1: messages.append('Email is required!') elif not EMAIL_REGEX.match(email): messages.append('Invalid Email!') if len(password) < 1: messages.append('Password is required!') elif not PASSWORD_REGEX.match(password): messages.append('Password must contain at least 1 number and capitalization!') if len(messages) < 1: user = User.userManager.filter(email=email.lower()) if len(user) < 1: return False, ['Email not found!'] if bcrypt.checkpw(password.encode(), user[0].password.encode()): return True, user[0] else: return False, ['Incorrect Password!'] else: return False, messages class User(models.Model): username = models.CharField(max_length=255) email = models.CharField(max_length=255) password = models.CharField(max_length=255) is_admin = models.BooleanField(default=False) description = models.CharField(max_length=255, blank=True) created_at = models.DateTimeField(auto_now_add=True) updated_at = models.DateTimeField(auto_now=True) userManager = UserManager() def __repr__(self): return \"<User object: {} {}>\".format(self.username, self.email)",
		"hash": "45d4b15192f7a1d78e83dd96793ac95ef553fd3173d1ea7db650a14cdff1b0d0c0974330a96a584b2120641c465a12bea670bcf77dd53618967deeff37765088"
	},
	"testing/apps/user_app/views.py": {
		"raw": "from django.shortcuts import render, redirect from django.http import JsonResponse from django.core.urlresolvers import reverse from django.contrib import messages from .models import User def register(request): check = User.userManager.register(request.POST['username'], request.POST['email'], request.POST['password'], request.POST['confirm_password']) if check[0]: request.session['user_id'] = check[1].id request.session['username'] = check[1].username return redirect(reverse('message_home')) else: for error in check[1]: messages.add_message(request, messages.ERROR, error) return redirect(reverse('message_index')) def login(request): check = User.userManager.login(request.POST['email'], request.POST['password']) if check[0]: request.session['user_id'] = check[1].id request.session['username'] = check[1].username return redirect(reverse('message_home')) else: for error in check[1]: messages.add_message(request, messages.ERROR, error) return redirect(reverse('message_index')) def logout(request): request.session.clear() messages.add_message(request, messages.SUCCESS, 'Log out successful!') return redirect(reverse('message_index'))",
		"hash": "ec7b87c5cae5202242b5a87659715416bdf80f7229897e00b04ef7e8d4ca318418c89884ac32115960b8dd7dc54f4f154210e169892c9ca455a1c42a497d5ac2"
	},
	"testing/apps/user_app/tests.py": {
		"raw": "from django.test import TestCase # Create your tests here.",
		"hash": "bd848740e5452e0769c4cabe7281018d2d35f19d1550b372fc52e3e48fe934121ee0510c1a6d5e65fea7e9c69fb20b9fb8a8eafc75e813700b7d0d1a1cc38a97"
	},
	"testing/apps/message_app/urls.py": {
		"raw": "from django.conf.urls import url from . import views urlpatterns = [ url(r'^$', views.index, name='message_index'), url(r'^messages$', views.home, name='message_home'), url(r'^messages/send$', views.home, name='message_send'), url(r'^messages/(?P<user_id>\\d+)$', views.conversation), url(r'^messages/sent$', views.sent), url(r'^messages/received$', views.received), ]",
		"hash": "924b7a490581b872d351f22afb9f5f46f666a1057d749775f3cec39ce532e17059003c0057e5b01bb38c981fe3a389865878c1bb214a56a2307e3f0d169117bc"
	},
	"testing/apps/message_app/migrations/0001_initial.py": {
		"raw": "# -*- coding: utf-8 -*- # Generated by Django 1.10 on 2017-07-22 19:25 from __future__ import unicode_literals from django.db import migrations, models import django.db.models.deletion import django.db.models.manager class Migration(migrations.Migration): initial = True dependencies = [ ('user_app', '0001_initial'), ] operations = [ migrations.CreateModel( name='Message', fields=[ ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')), ('message', models.TextField(max_length=1000)), ('created_at', models.DateTimeField(auto_now_add=True)), ('updated_at', models.DateTimeField(auto_now=True)), ('user_from', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='from_user', to='user_app.User')), ('user_to', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='to_user', to='user_app.User')), ], managers=[ ('messageManager', django.db.models.manager.Manager()), ], ), ] ",
		"hash": "56724a1e341fc4349f77c718a1aa8e5858e9ea99e191228db030f83446bd842209f045786fe10ee97030b007d082959f9b88922ae015be018ef87ef2f1457e08"
	},
	"testing/apps/message_app/apps.py": {
		"raw": "from __future__ import unicode_literals from django.apps import AppConfig class MessageAppConfig(AppConfig): name = 'message_app' ",
		"hash": "a12678d4d2fba6f91cbef52467361db751cdbd9fdae24ff9652e8bfaf5995c11a26449079b205dee9d1243ab5a88ace5ed3989c2a5d67aaab9f31214abb1ce74"
	},
	"testing/apps/message_app/admin.py": {
		"raw": "from django.contrib import admin # Register your models here. ",
		"hash": "39c71cb862651ce8ccc86603c2bebbbaa600f0c9de5a38c620b83e14b11acdf8799ab8f85363c5be63417490906ac9e051a2c8745c4d2c54236fcdd2a9fdd2bf"
	},
	"testing/apps/message_app/models.py": {
		"raw": "from __future__ import unicode_literals from django.db import models from ..user_app.models import User class MessageManager(models.Manager): def send(self, message, user_from, user_to): if len(message) < 1: return False else: Message.messageManager.create(message=message, user_from_id=user_from, user_to_id=user_to) return True class Message(models.Model): message = models.TextField(max_length=1000) user_to = models.ForeignKey(User, related_name=\"to_user\") user_from = models.ForeignKey(User, related_name=\"from_user\") created_at = models.DateTimeField(auto_now_add=True) updated_at = models.DateTimeField(auto_now=True) messageManager= MessageManager() def __repr__(self): return \"<Message: {} {}>\".format(self.message, self.created_at)",
		"hash": "2ae67bffadd00e3c0b9bc1cc040427c77373fe71e5f050e0f7f17eb42ae127b9568aa8be18ea374dee3239523a234ea9a08cc9b1ae189b33b1d4b3bc94919d1a"
	},
	"testing/apps/message_app/templates/message_app/home.html": {
		"raw": "<!DOCTYPE html> <html> <head> <title>Messages</title> <meta charset=\"utf-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\"> <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js\"></script> <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js\"></script> </head> <body> <div class=\"container\"> <!-- Website greeting --> <div class=\"jumbotron\"> <h1>Welcome to Messages</h1> <a href=\"{% url 'user_logout' %}\" class=\"pull-right\"> <button class=\"btn btn-sm btn-danger\">Logout</button> </a> </div> <div class=\"col-sm-8\"> <h3>Sent Messages:</h3> <table class=\"table\"> <tr> <th>To:</th> <th>Message:</th> <th>Sent on:</th> </tr> {% for message in sent %} <tr> <td><a href=\"/messages/{{ message.user_to_id }}\">{{ message.user_to.username }}</a></td> <td>{{ message.message }}</td> <td>{{ message.created_at }}</td> </tr> {% endfor %} </table> <a href=\"/messages/sent\"><button class=\"btn btn-primary btn-sm\">Show All</button></a> <h3>Received Messages:</h3> <table class=\"table\"> <tr> <th>From:</th> <th>Message:</th> <th>Sent on:</th> </tr> {% for message in received %} <tr> <td><a href=\"/messages/{{ message.user_from_id }}\">{{ message.user_from.username }}</a></td> <td>{{ message.message }}</td> <td>{{ message.created_at }}</td> </tr> {% endfor %} </table> <a href=\"/messages/received\"><button class=\"btn btn-primary btn-sm\">Show All</button></a> </div> <!-- Form to login an existing user --> <div class=\"col-sm-4\"> <h3>New Message:</h3> <form action=\"{% url 'message_send' %}\" method=\"post\"> {% csrf_token %} <div class=\"form-group\"> <label for=\"msg\">Message:</label> <textarea type=\"text\" name=\"message\" placeholder=\"Message\" id=\"msg\" class=\"form-control\"></textarea> </div> <div class=\"form-group\"> <label for=\"usr\">User:</label> <select name=\"user_to\" id=\"usr\" class=\"form-control\"> {% for user in users %} <option value=\"{{ user.id }}\">{{ user.username }}</option> {% endfor %} </select> </div> <input type=\"submit\" value=\"Message\" class=\"btn btn-success\"> </form> </div> </div> </body> </html>",
		"hash": "e5fe0ba0cc1e2ef464859850d24b447f43d04db7036f2c4eaff3fd13f5ebed5f7585432df640f0cb188b80025971f1e270e3bd5fe66fd2c7cdb303466adcd8b4"
	},
	"testing/apps/message_app/templates/message_app/index.html": {
		"raw": "<!DOCTYPE html> <html> <head> <title>Messages</title> <meta charset=\"utf-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\"> <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js\"></script> <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js\"></script> </head> <body> <div class=\"container\"> <!-- Website greeting --> <div class=\"jumbotron\"> <h1>Welcome to Messages</h1> </div> <!-- Form to register a new user --> <div class=\"col-sm-6\"> <h2>User Registration</h2> <form action=\"{% url 'user_register' %}\" method=\"post\"> {% csrf_token %} <div class=\"form-group\"> <label for=\"username\">Username:</label> <input type=\"text\" name=\"username\" placeholder=\"Username\" id=\"username\" class=\"form-control\"> </div> <div class=\"form-group\"> <label for=\"email\">Email Address:</label> <input type=\"text\" name=\"email\" placeholder=\"Email address\" id=\"email\" class=\"form-control\"> </div> <div class=\"form-group\"> <label for=\"pw\">Password:</label> <input type=\"password\" name=\"password\" id=\"pw\" class=\"form-control\" placeholder=\"Password\"> </div> <div class=\"form-group\"> <label for=\"cpw\">Confirm Password:</label> <input type=\"password\" name=\"confirm_password\" id=\"cpw\" class=\"form-control\" placeholder=\"Confirm password\"> </div> <input type=\"submit\" value=\"Register\" class=\"btn btn-primary\"> </form> </div> <!-- Form to login an existing user --> <div class=\"col-sm-6\"> <h2>User Login</h2> <form action=\"{% url 'user_login' %}\" method=\"post\"> {% csrf_token %} <div class=\"form-group\"> <label for=\"email\">Email Address:</label> <input type=\"text\" name=\"email\" placeholder=\"Email address\" id=\"email\" class=\"form-control\"> </div> <div class=\"form-group\"> <label for=\"pw\">Password:</label> <input type=\"password\" name=\"password\" id=\"pw\" class=\"form-control\" placeholder=\"Password\"> </div> <input type=\"submit\" value=\"Login\" class=\"btn btn-primary\"> </form> </div> <!-- Flashed Messages go here --> <div class=\"col-sm-12\"> {% if messages %} <br> {% for message in messages %} <div class=\"alert alert-danger alert-dismissable\"> <a href='' class=\"close\" data-dismiss='alert' aria-label='close'>x</a> {{message}} </div> {% endfor %} {% endif %} <div> </div> </body> </html>",
		"hash": "f6ef80ce8a079cc66d124eb0c113bce935f6b9f4ec5dfc6ff2a92ce3e15077e0714bdb925d86bd16e31f0a66c586ec397b1c0cdc8604bdb15fc1621416858389"
	},
	"testing/apps/message_app/templates/message_app/chat.html": {
		"raw": "<!DOCTYPE html> <html> <head> <title>Messages</title> <meta charset=\"utf-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\"> <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js\"></script> <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js\"></script> </head> <body> <div class=\"container\"> <div class=\"jumbotron\"> <h1>Conversation</h1> <a href=\"{% url 'user_logout' %}\" class=\"pull-right\"> <button class=\"btn btn-sm btn-danger\">Logout</button> </a> </div> {% for msg in conversation%} {% if msg.user_from_id == request.session.user_id %} <div class=\"well\"><strong>You said:</strong> {{ msg.message }} <span class=\"pull-right\">({{ msg.created_at }})</span></div> {% else %} <div class=\"well\"><strong>{{ msg.user_from.username }} said:</strong> {{ msg.message }} <span class=\"pull-right\">({{ msg.created_at }})</span></div> {% endif %} {% endfor %} <div class=\"col-sm-12\"> <form action=\"/messages/{{user_id}}\" method=\"post\"> {% csrf_token %} <div class=\"form-group\"> <label for=\"msg\">New message:</label> <textarea type=\"text\" name=\"message\" placeholder=\"Message\" id=\"msg\" class=\"form-control\"></textarea> </div> <input type=\"submit\" value=\"Message\" class=\"btn btn-success\"> </form> <a href=\"{% url 'message_home' %}\" class=\"pull-right\"> <button class=\"btn btn-primary\">Back</button> </a> </div> </div> </body> </html>",
		"hash": "ad324abefc2849b2c65a4c2bdf3e92bdcc6b204e7f33decc0354dade5c390d4e5bc9ebbff6e027a0b65ac023bf8e473973b258a90dac73fada5ae0b476572868"
	},
	"testing/apps/message_app/templates/message_app/received.html": {
		"raw": "<!DOCTYPE html> <html> <head> <title>Messages</title> <meta charset=\"utf-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\"> <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js\"></script> <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js\"></script> </head> <body> <div class=\"container\"> <!-- Website greeting --> <div class=\"jumbotron\"> <h1>Welcome to Messages</h1> <a href=\"{% url 'user_logout' %}\" class=\"pull-right\"> <button class=\"btn btn-sm btn-danger\">Logout</button> </a> </div> <div class=\"col-sm-12\"> <h3>All Received Messages:</h3> <table class=\"table\"> <tr> <th>From:</th> <th>Message:</th> <th>Sent on:</th> </tr> {% for message in received reversed %} <tr> <td><a href=\"/messages/{{ message.user_from_id }}\">{{ message.user_from.username }}</a></td> <td>{{ message.message }}</td> <td>{{ message.created_at }}</td> </tr> {% endfor %} </table> </div> <a href=\"{% url 'message_home' %}\"><button class=\"btn btn-primary\">Back</button></a> </div> </body> </html>",
		"hash": "e7f154f7fa259f6f9da73c115fb2af4aaa83ec99767c00c7d5b5565c5a57f4f7b7e5aa63007a37970725458720419ae272fec80e745b5ae2d8f8cafbdf5e7694"
	},
	"testing/apps/message_app/templates/message_app/sent.html": {
		"raw": "<!DOCTYPE html> <html> <head> <title>Messages</title> <meta charset=\"utf-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\"> <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js\"></script> <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js\"></script> </head> <body> <div class=\"container\"> <!-- Website greeting --> <div class=\"jumbotron\"> <h1>Welcome to Messages</h1> <a href=\"{% url 'user_logout' %}\" class=\"pull-right\"> <button class=\"btn btn-sm btn-danger\">Logout</button> </a> </div> <div class=\"col-sm-12\"> <h3>All Sent Messages:</h3> <table class=\"table\"> <tr> <th>To:</th> <th>Message:</th> <th>Sent on:</th> </tr> {% for message in sent reversed %} <tr> <td><a href=\"/messages/{{ message.user_to_id }}\">{{ message.user_to.username }}</a></td> <td>{{ message.message }}</td> <td>{{ message.created_at }}</td> </tr> {% endfor %} </table> </div> <a href=\"{% url 'message_home' %}\"><button class=\"btn btn-primary\">Back</button></a> </div> </body> </html>",
		"hash": "a114ef99c0f1497c7c1e0e21399bb92ec9ad11e9860126dc9621061fe50c510cd8391406643aa4f9af56696cc8aea4e724cce0c6df0da9b6e34d5dd44be82f8e"
	},
	"testing/apps/message_app/views.py": {
		"raw": "from django.shortcuts import render, redirect from django.core.urlresolvers import reverse from models import User, Message def index(request): print \"Hi I am an annoying print statement here to mess things up\" return render(request, 'message_app/index.html') def home(request): if 'user_id' not in request.session: return redirect('/') if request.method == 'GET': context = { 'sent': Message.messageManager.filter(user_from = request.session['user_id']).order_by('-id')[:3], 'received': Message.messageManager.filter(user_to = request.session['user_id']).order_by('-id')[:3] } users = User.userManager.all().exclude(id=request.session['user_id']) for msg in context['sent']: users = users.exclude(id=msg.user_to_id) for msg in context['received']: users = users.exclude(id=msg.user_from_id) context['users'] = users return render(request, \"message_app/home.html\", context) elif request.method == 'POST': Message.messageManager.send(request.POST['message'], request.session['user_id'], request.POST['user_to']) return redirect(reverse('message_home')) def conversation(request, user_id): if 'user_id' not in request.session: return redirect('/') if request.method == 'GET': sent = Message.messageManager.filter(user_from = request.session['user_id']).filter(user_to=user_id) received = Message.messageManager.filter(user_to = request.session['user_id']).filter(user_from=user_id) conversation = [msg for msg in sent] + [msg for msg in received] conversation.sort(key=lambda x: x.created_at) context = { 'user_id': user_id, 'conversation': conversation } return render(request, 'message_app/chat.html', context) elif request.method == 'POST': Message.messageManager.send(request.POST['message'], request.session['user_id'], user_id) return redirect('/messages/{}'.format(user_id)) def sent(request): if 'user_id' not in request.session: return redirect('/') sent = Message.messageManager.filter(user_from = request.session['user_id']) return render(request, \"message_app/sent.html\", {'sent': sent}) def received(request): if 'user_id' not in request.session: return redirect('/') received = Message.messageManager.filter(user_to = request.session['user_id']) return render(request, \"message_app/received.html\", {'received': received}) ",
		"hash": "ab965fb1b5b2237b2fb4b54e1ddf0a2edb48f54f7cade03bba4289b617e59e090ed0560766de9ce19e75e1e66056ef67e24c1aa1afe0111c434c46ce55311b25"
	},
	"testing/apps/message_app/tests.py": {
		"raw": "from django.test import TestCase # Create your tests here.",
		"hash": "bd848740e5452e0769c4cabe7281018d2d35f19d1550b372fc52e3e48fe934121ee0510c1a6d5e65fea7e9c69fb20b9fb8a8eafc75e813700b7d0d1a1cc38a97"
	},
	"testing/manage.py": {
		"raw": "#!/usr/bin/env python import os import sys if __name__ == \"__main__\": os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"messages.settings\") try: from django.core.management import execute_from_command_line except ImportError: # The above import may fail for some other reason. Ensure that the # issue is really that Django is missing to avoid masking other # exceptions on Python 2. try: import django except ImportError: raise ImportError( \"Couldn't import Django. Are you sure it's installed and \" \"available on your PYTHONPATH environment variable? Did you \" \"forget to activate a virtual environment?\" ) raise execute_from_command_line(sys.argv) ",
		"hash": "4054846989743e51abecef09d19355b0fc8f3d64582d024b76b873c3a553b01d0682e62f637fe38e94f3c19e2cec0eba01005f1e317a212ba72c1033ddac27f3"
	}
}