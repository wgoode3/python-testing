{
	"project": "registration",
	"student": {
		"first_name": "Isaac",
		"last_name": "Suntag"
	},
	"registration/registration/urls.py": {
		"raw": "\"\"\"registration URL Configuration The `urlpatterns` list routes URLs to views. For more information please see: https://docs.djangoproject.com/en/1.10/topics/http/urls/ Examples: Function views 1. Add an import: from my_app import views 2. Add a URL to urlpatterns: url(r'^$', views.home, name='home') Class-based views 1. Add an import: from other_app.views import Home 2. Add a URL to urlpatterns: url(r'^$', Home.as_view(), name='home') Including another URLconf 1. Import the include() function: from django.conf.urls import url, include 2. Add a URL to urlpatterns: url(r'^blog/', include('blog.urls')) \"\"\" from django.conf.urls import url, include from django.contrib import admin urlpatterns = [ url(r'^', include('apps.login_app.urls')), url(r'^admin/', admin.site.urls), ] "
	},
	"registration/registration/wsgi.py": {
		"raw": "\"\"\" WSGI config for registration project. It exposes the WSGI callable as a module-level variable named ``application``. For more information on this file, see https://docs.djangoproject.com/en/1.10/howto/deployment/wsgi/ \"\"\" import os from django.core.wsgi import get_wsgi_application os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"registration.settings\") application = get_wsgi_application() "
	},
	"registration/registration/settings.py": {
		"raw": "\"\"\" Django settings for registration project. Generated by 'django-admin startproject' using Django 1.10. For more information on this file, see https://docs.djangoproject.com/en/1.10/topics/settings/ For the full list of settings and their values, see https://docs.djangoproject.com/en/1.10/ref/settings/ \"\"\" import os # Build paths inside the project like this: os.path.join(BASE_DIR, ...) BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__))) # Quick-start development settings - unsuitable for production # See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/ # SECURITY WARNING: keep the secret key used in production secret! SECRET_KEY = 'ga*v4vu-ah1-r54n)j%x6*b5^(*l%4**q1brb+q3ckk!ohbx(5' # SECURITY WARNING: don't run with debug turned on in production! DEBUG = True ALLOWED_HOSTS = [] # Application definition INSTALLED_APPS = [ 'apps.login_app', 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', ] MIDDLEWARE = [ 'django.middleware.security.SecurityMiddleware', 'django.contrib.sessions.middleware.SessionMiddleware', 'django.middleware.common.CommonMiddleware', 'django.middleware.csrf.CsrfViewMiddleware', 'django.contrib.auth.middleware.AuthenticationMiddleware', 'django.contrib.messages.middleware.MessageMiddleware', 'django.middleware.clickjacking.XFrameOptionsMiddleware', ] ROOT_URLCONF = 'registration.urls' TEMPLATES = [ { 'BACKEND': 'django.template.backends.django.DjangoTemplates', 'DIRS': [], 'APP_DIRS': True, 'OPTIONS': { 'context_processors': [ 'django.template.context_processors.debug', 'django.template.context_processors.request', 'django.contrib.auth.context_processors.auth', 'django.contrib.messages.context_processors.messages', ], }, }, ] WSGI_APPLICATION = 'registration.wsgi.application' # Database # https://docs.djangoproject.com/en/1.10/ref/settings/#databases DATABASES = { 'default': { 'ENGINE': 'django.db.backends.sqlite3', 'NAME': os.path.join(BASE_DIR, 'db.sqlite3'), } } # Password validation # https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators AUTH_PASSWORD_VALIDATORS = [ { 'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator', }, { 'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator', }, { 'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator', }, { 'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator', }, ] # Internationalization # https://docs.djangoproject.com/en/1.10/topics/i18n/ LANGUAGE_CODE = 'en-us' TIME_ZONE = 'UTC' USE_I18N = True USE_L10N = True USE_TZ = True # Static files (CSS, JavaScript, Images) # https://docs.djangoproject.com/en/1.10/howto/static-files/ STATIC_URL = '/static/' "
	},
	"registration/apps/login_app/urls.py": {
		"raw": "from django.conf.urls import url from . import views urlpatterns= [ url(r'^$', views.index), url(r'^success$', views.success), url(r'^add$', views.add), url(r'^check$', views.check), url(r'^logout$', views.logout) ] "
	},
	"registration/apps/login_app/migrations/0001_initial.py": {
		"raw": "# -*- coding: utf-8 -*- # Generated by Django 1.10 on 2017-07-21 16:13 from __future__ import unicode_literals from django.db import migrations, models class Migration(migrations.Migration): initial = True dependencies = [ ] operations = [ migrations.CreateModel( name='User', fields=[ ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')), ('first_name', models.CharField(max_length=255)), ('last_name', models.CharField(max_length=255)), ('email', models.CharField(max_length=255)), ('password', models.CharField(max_length=255)), ('created_at', models.DateTimeField(auto_now_add=True)), ('updated_at', models.DateTimeField(auto_now=True)), ], ), ] "
	},
	"registration/apps/login_app/apps.py": {
		"raw": "from __future__ import unicode_literals from django.apps import AppConfig class LoginAppConfig(AppConfig): name = 'login_app' "
	},
	"registration/apps/login_app/admin.py": {
		"raw": "from django.contrib import admin # Register your models here. "
	},
	"registration/apps/login_app/models.py": {
		"raw": "from __future__ import unicode_literals from django.db import models import re import bcrypt # Create your models here. class UserManager(models.Manager): def validation(self, postData): errors = {} if len(postData['first_name']) < 1: errors['first_name'] = \"Please enter your first name.\" elif len(postData['first_name']) < 2: errors['first_name'] = \"First name must at least 2 characters.\" elif not re.match('[A-Za-z]+', postData['first_name']): errors['first_name'] = \"First name may only contain letters.\" if len(postData['last_name']) < 1: errors['last_name'] = \"Please enter your last name.\" elif len(postData['last_name']) < 2: errors['last_name'] = \"Last name must be at least 2 characters.\" elif not re.match('[A-Za-z]+', postData['last_name']): errors['last_name'] = \"Last name may only contain letters.\" if len(postData['email']) < 1: errors['email'] = \"Please enter your email.\" elif User.objects.filter(email=postData['email']): errors['email'] = \"Email is already taken\" elif not re.match('[A-Za-z0-9-_]+(.[A-Za-z0-9-_]+)*@[A-Za-z0-9-]+(.[A-Za-z0-9]+)*(.[A-Za-z]{2,})',postData['email']): errors['email'] = \"Incorrect email format.\" if len(postData['password']) < 1: errors['password'] = \"Please enter a password.\" elif len(postData['password']) < 8: errors['password'] = \"Password must be at least 8 characters.\" elif postData['pw_confirm'] != postData['password']: errors['password'] = \"Passwords do not match.\" return errors def login_validation(self, postData): errors = {} if len(postData['email']) < 1: errors['loginmail'] = \"Please enter your email.\" elif not User.objects.filter(email=postData['email']): errors['loginmail'] = \"Incorrect email.\" elif len(postData['password']) < 1: errors['loginpass'] = \"Please enter your password.\" elif not bcrypt.checkpw(postData['password'].encode(), User.objects.get(email=postData['email']).password.encode()): errors['loginpass'] = \"Incorrect password.\" return errors class User(models.Model): first_name = models.CharField(max_length=255) last_name = models.CharField(max_length=255) email = models.CharField(max_length=255) password = models.CharField(max_length=255) created_at = models.DateTimeField(auto_now_add=True) updated_at = models.DateTimeField(auto_now=True) objects = UserManager() "
	},
	"registration/apps/login_app/templates/login_app/index.html": {
		"raw": "<!DOCTYPE html> <html> <head> <meta charset=\"utf-8\"> <title>Login & Registration</title> {% load static %} <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static 'login_app/bootstrap.css' %}\"> <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js\"></script> <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js\"></script> <style type=\"text/css\"> .alert { color: #a94442; background-color: #f2dede; border-color: #ebccd1; } .alert a:hover { color: #a94442; } </style> </head> <body> <div class=\"container\"> <h1>Registration</h1> <form action=\"/add\" method=\"post\"> {% csrf_token %} <div class=\"form-group\"> <label class=\"control-label col-sm-12\" for=\"first_name\">First Name:</label> <div class=\"col-sm-12\"> <input type=\"text\" class=\"form-control\" name=\"first_name\" placeholder=\"first name\"><br> {% for message in messages %} {% if 'first_name' in message.tags %} <div class=\"alert alert-dismissable fade in\"><a href=\"#\" class=\"close\" data-dismiss=\"alert\" aria-label=\"close\">&times;</a> {{ message }}</div> {% endif %} {% endfor %} </div> </div> <div class=\"form-group\"> <label class=\"control-label col-sm-12\" for=\"last_name\">Last Name:</label> <div class=\"col-sm-12\"> <input type=\"text\" class=\"form-control\" name=\"last_name\" placeholder=\"last name\"><br> {% for message in messages %} {% if 'last_name' in message.tags %} <div class=\"alert alert-dismissable fade in\"><a href=\"#\" class=\"close\" data-dismiss=\"alert\" aria-label=\"close\">&times;</a> {{ message }}</div> {% endif %} {% endfor %} </div> </div> <div class=\"form-group\"> <label class=\"control-label col-sm-12\" for=\"email\">Email:</label> <div class=\"col-sm-12\"> <input type=\"text\" class=\"form-control\" name=\"email\" placeholder=\"email\"><br> {% for message in messages %} {% if 'email' in message.tags %} <div class=\"alert alert-dismissable fade in\"><a href=\"#\" class=\"close\" data-dismiss=\"alert\" aria-label=\"close\">&times;</a> {{ message }}</div> {% endif %} {% endfor %} </div> </div> <div class=\"form-group\"> <label class=\"control-label col-sm-12\" for=\"password\">Password:</label> <div class=\"col-sm-12\"> <input type=\"password\" class=\"form-control\" name=\"password\" placeholder=\"password\"><br> {% for message in messages %} {% if 'password' in message.tags %} <div class=\"alert alert-dismissable fade in\"><a href=\"#\" class=\"close\" data-dismiss=\"alert\" aria-label=\"close\">&times;</a> {{ message }}</div> {% endif %} {% endfor %} </div> </div> <div class=\"form-group\"> <label class=\"control-label col-sm-12\" for=\"pw_confirm\">Confirm Password:</label> <div class=\"col-sm-12\"> <input type=\"password\" class=\"form-control\" name=\"pw_confirm\" placeholder=\"confirm password\"><br> </div> </div> <div class=\"form-group col-sm-12\"> <input type=\"submit\" value=\"Register\" class=\"btn btn-default\"> </div> </form> <h1>Login</h1> <form action=\"/check\" method=\"post\"> {% csrf_token %} <div class=\"form-group\"> <label class=\"control-label col-sm-12\" for=\"email\">Email:</label> <div class=\"col-sm-12\"> <input type=\"text\" class=\"form-control\" name=\"email\" placeholder=\"email\"><br> {% for message in messages %} {% if 'loginmail' in message.tags %} <div class=\"alert alert-dismissable fade in\"><a href=\"#\" class=\"close\" data-dismiss=\"alert\" aria-label=\"close\">&times;</a> {{ message }}</div> {% endif %} {% endfor %} </div> </div> <div class=\"form-group\"> <label class=\"control-label col-sm-12\" for=\"password\">Password:</label> <div class=\"col-sm-12\"> <input type=\"password\" class=\"form-control\" name=\"password\" placeholder=\"password\"><br> {% for message in messages %} {% if 'loginpass' in message.tags %} <div class=\"alert alert-dismissable fade in\"><a href=\"#\" class=\"close\" data-dismiss=\"alert\" aria-label=\"close\">&times;</a> {{ message }}</div> {% endif %} {% endfor %} </div> </div> <div class=\"form-group col-sm-12\"> <input type=\"submit\" value=\"Login\" class=\"btn btn-default\"> </div> </form> </div> </body> </html> "
	},
	"registration/apps/login_app/templates/login_app/success.html": {
		"raw": "<!DOCTYPE html> <html> <head> <meta charset=\"utf-8\"> <title>Success!</title> {% load static %} <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static 'login_app/bootstrap.css' %}\"> </head> <body> <div class=\"container text-center\"> <h1>Success! Welcome, {{ request.session.first_name }}!</h1> <a href=\"/logout\" class=\"btn btn-default\">Logout</a> </div> </body> </html> "
	},
	"registration/apps/login_app/views.py": {
		"raw": "from django.shortcuts import render, HttpResponse, redirect from django.contrib import messages from .models import User from datetime import datetime import bcrypt # Create your views here. def index(request): return render(request, 'login_app/index.html') def add(request): errors = User.objects.validation(request.POST) if errors > 0: for tag, error in errors.iteritems(): messages.error(request, error, extra_tags=tag) return redirect('/') else: pwhash = bcrypt.hashpw(request.POST['password'].encode(), bcrypt.gensalt()) User.objects.create(first_name=request.POST['first_name'], last_name=request.POST['last_name'], email=request.POST['email'], password=pwhash) request.session['first_name'] = request.POST['first_name'] return redirect('/success') def check(request): errors = User.objects.login_validation(request.POST) if len(errors) > 0: for tag, error in errors.iteritems(): messages.error(request, error, extra_tags=tag) return redirect('/') else: request.session['first_name'] = User.objects.get(email=request.POST['email']).first_name return redirect('/success') def success(request): return render(request, 'login_app/success.html') def logout(request): request.session.clear() return redirect('/') "
	},
	"registration/apps/login_app/tests.py": {
		"raw": "from django.test import TestCase # Create your tests here. "
	},
	"registration/manage.py": {
		"raw": "#!/usr/bin/env python import os import sys if __name__ == \"__main__\": os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"registration.settings\") try: from django.core.management import execute_from_command_line except ImportError: # The above import may fail for some other reason. Ensure that the # issue is really that Django is missing to avoid masking other # exceptions on Python 2. try: import django except ImportError: raise ImportError( \"Couldn't import Django. Are you sure it's installed and \" \"available on your PYTHONPATH environment variable? Did you \" \"forget to activate a virtual environment?\" ) raise execute_from_command_line(sys.argv) "
	}
}