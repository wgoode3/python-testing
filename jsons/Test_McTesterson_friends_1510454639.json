{
	"project": "friends",
	"student": {
		"first_name": "Test",
		"last_name": "McTesterson"
	},
	"friends/friends/urls.py": {
		"raw": "\"\"\"friends URL Configuration The `urlpatterns` list routes URLs to views. For more information please see: https://docs.djangoproject.com/en/1.11/topics/http/urls/ Examples: Function views 1. Add an import: from my_app import views 2. Add a URL to urlpatterns: url(r'^$', views.home, name='home') Class-based views 1. Add an import: from other_app.views import Home 2. Add a URL to urlpatterns: url(r'^$', Home.as_view(), name='home') Including another URLconf 1. Import the include() function: from django.conf.urls import url, include 2. Add a URL to urlpatterns: url(r'^blog/', include('blog.urls')) \"\"\" from django.conf.urls import url, include urlpatterns = [ url(r'^', include(\"apps.friends_app.urls\")) ] ",
		"hash": "8c79ed14679d081a0f5a268d030f4f2d6b6c66040433459265c81294324d363543a2a2134389b8e49fd8fb3d0dece59d448fbc7d271fbad0cdc003949ea146d1"
	},
	"friends/friends/wsgi.py": {
		"raw": "\"\"\" WSGI config for friends project. It exposes the WSGI callable as a module-level variable named ``application``. For more information on this file, see https://docs.djangoproject.com/en/1.11/howto/deployment/wsgi/ \"\"\" import os from django.core.wsgi import get_wsgi_application os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"friends.settings\") application = get_wsgi_application() ",
		"hash": "5801b0ce94b951e70074c4ae66c1dc8d878b4b1632a06549d5c577dd058071a70a9906a96392a35fc619f53c671dce5bfe08208b8f4937717ed801ce2ad53a5f"
	},
	"friends/friends/settings.py": {
		"raw": "\"\"\" Django settings for friends project. Generated by 'django-admin startproject' using Django 1.11.5. For more information on this file, see https://docs.djangoproject.com/en/1.11/topics/settings/ For the full list of settings and their values, see https://docs.djangoproject.com/en/1.11/ref/settings/ \"\"\" import os # Build paths inside the project like this: os.path.join(BASE_DIR, ...) BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__))) # Quick-start development settings - unsuitable for production # See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/ # SECURITY WARNING: keep the secret key used in production secret! SECRET_KEY = '43_lj$=wpd^7td8)h4w-h_*dcl2!iqbc)ov0b2@6_@78bzo7#*' # SECURITY WARNING: don't run with debug turned on in production! DEBUG = True ALLOWED_HOSTS = [] # Application definition INSTALLED_APPS = [ 'apps.friends_app', 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', ] MIDDLEWARE = [ 'django.middleware.security.SecurityMiddleware', 'django.contrib.sessions.middleware.SessionMiddleware', 'django.middleware.common.CommonMiddleware', 'django.middleware.csrf.CsrfViewMiddleware', 'django.contrib.auth.middleware.AuthenticationMiddleware', 'django.contrib.messages.middleware.MessageMiddleware', 'django.middleware.clickjacking.XFrameOptionsMiddleware', ] ROOT_URLCONF = 'friends.urls' TEMPLATES = [ { 'BACKEND': 'django.template.backends.django.DjangoTemplates', 'DIRS': [], 'APP_DIRS': True, 'OPTIONS': { 'context_processors': [ 'django.template.context_processors.debug', 'django.template.context_processors.request', 'django.contrib.auth.context_processors.auth', 'django.contrib.messages.context_processors.messages', ], }, }, ] WSGI_APPLICATION = 'friends.wsgi.application' # Database # https://docs.djangoproject.com/en/1.11/ref/settings/#databases DATABASES = { 'default': { 'ENGINE': 'django.db.backends.sqlite3', 'NAME': os.path.join(BASE_DIR, 'db.sqlite3'), } } # Password validation # https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators AUTH_PASSWORD_VALIDATORS = [ { 'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator', }, { 'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator', }, { 'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator', }, { 'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator', }, ] # Internationalization # https://docs.djangoproject.com/en/1.11/topics/i18n/ LANGUAGE_CODE = 'en-us' TIME_ZONE = 'UTC' USE_I18N = True USE_L10N = True USE_TZ = True # Static files (CSS, JavaScript, Images) # https://docs.djangoproject.com/en/1.11/howto/static-files/ STATIC_URL = '/static/' ",
		"hash": "5b545f17185deaca3fc8f6d0c7e9378750b156991e127e497f8f0d55af2ae506eb9e4ccc4eaab8bd02c4d582174cb111cc2f0ae0305ba1210962350484a91412"
	},
	"friends/apps/friends_app/urls.py": {
		"raw": "from django.conf.urls import url from . import views urlpatterns = [ url(r'^$', views.index), url(r'^register$', views.register), url(r'^login$', views.login), url(r'^logout$', views.logout), url(r'^friends$', views.friends), url(r'^user/(?P<id>\\d+)$', views.showUser), url(r'^user/(?P<id>\\d+)/friend$', views.addFriend), url(r'^user/(?P<id>\\d+)/unfriend$', views.removeFriend) ]",
		"hash": "ce6ddc124915c2e5c2576a5f046aec20feb936f151208f9054a62abf8c76abba7f1a64771b592ecb7345c9c27ceb4edc627a4c11f7a303a00bded92e487a2092"
	},
	"friends/apps/friends_app/migrations/0002_user_friends.py": {
		"raw": "# -*- coding: utf-8 -*- # Generated by Django 1.11.5 on 2017-10-31 16:10 from __future__ import unicode_literals from django.db import migrations, models class Migration(migrations.Migration): dependencies = [ ('friends_app', '0001_initial'), ] operations = [ migrations.AddField( model_name='user', name='friends', field=models.ManyToManyField(blank=True, related_name='_user_friends_+', to='friends_app.User'), ), ] ",
		"hash": "04470d02c8fb17a64eddd3a307a3e5ade3b3c8abae8e5256bcdf661369e782c017d2173e8983fc92ef4c023bff38176f1253b4e1dd598c763ac0a9251046c5e2"
	},
	"friends/apps/friends_app/migrations/0001_initial.py": {
		"raw": "# -*- coding: utf-8 -*- # Generated by Django 1.11.5 on 2017-10-26 16:19 from __future__ import unicode_literals from django.db import migrations, models import django.db.models.manager class Migration(migrations.Migration): initial = True dependencies = [ ] operations = [ migrations.CreateModel( name='User', fields=[ ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')), ('name', models.CharField(max_length=255)), ('alias', models.CharField(max_length=255)), ('email', models.CharField(max_length=255)), ('password', models.CharField(max_length=255)), ('date_of_birth', models.DateField(max_length=255)), ], managers=[ ('userManager', django.db.models.manager.Manager()), ], ), ] ",
		"hash": "47f8dfbe10eebfaf279be412c72abb92e709edf49f09744926a0f36fb2ac33ddd0fe43fc1c7fdc90da56df9543a92291c0dc5b6b622105f7a04edf0b4036b118"
	},
	"friends/apps/friends_app/apps.py": {
		"raw": "# -*- coding: utf-8 -*- from __future__ import unicode_literals from django.apps import AppConfig class FriendsAppConfig(AppConfig): name = 'friends_app' ",
		"hash": "231a9f532b5a1f9e14383cd09cc3bfc43b3b21516facb4871235e320a154ffdf1f05ea3e8919e2e42f93b2f0b2d08bec6059e1039b206dc14eb5f208d4ffa99a"
	},
	"friends/apps/friends_app/admin.py": {
		"raw": "# -*- coding: utf-8 -*- from __future__ import unicode_literals from django.contrib import admin # Register your models here. ",
		"hash": "76b0a5fa9b7702d7d92a3a76a622f57a2ddb69fa2aa14777079e25c915c0b863a86ca2b6a10b1289f1f7a22f20a3f2a2fc17e2e84347a450ea6404dcd4fc9211"
	},
	"friends/apps/friends_app/models.py": {
		"raw": "# -*- coding: utf-8 -*- from __future__ import unicode_literals from django.db import models from datetime import datetime import bcrypt import re EMAIL_REGEX = re.compile(r'^[a-zA-Z0-9.+_-]+@[a-zA-Z0-9._-]+\\.[a-zA-Z]+$') class UserManager(models.Manager): def register(self, data): response = { \"user\": None, \"logged_in\": False, \"errors\": [] } if len(data[\"name\"]) < 3: response[\"errors\"].append(\"Name must be 3 characters or longer!\") if len(data[\"alias\"]) < 3: response[\"errors\"].append(\"Alias must be 3 characters or longer!\") if len(data[\"email\"]) == 0: response[\"errors\"].append(\"Email is required!\") elif not EMAIL_REGEX.match(data[\"email\"]): response[\"errors\"].append(\"Invalid Email!\") elif len(User.userManager.filter(email=data[\"email\"])) > 0: response[\"errors\"].append(\"Email already in use!\") if len(data[\"password\"]) < 8: response[\"errors\"].append(\"Password must be 8 characters or longer!\") if data[\"password\"] != data[\"confirm_password\"]: response[\"errors\"].append(\"Confirm Password must match Password!\") if len(data[\"date_of_birth\"]) == 0: response[\"errors\"].append(\"Date of Birth is required!\") else: dob = datetime.strptime(data[\"date_of_birth\"], '%Y-%m-%d') if dob > datetime.now(): response[\"errors\"].append(\"Date of Birth must be in the past!\") if len(response[\"errors\"]) == 0: response[\"logged_in\"] = True response[\"user\"] = User.userManager.create( name=data[\"name\"], alias=data[\"alias\"], email=data[\"email\"], password=bcrypt.hashpw(data[\"password\"].encode(), bcrypt.gensalt()), date_of_birth=dob ) return response def login(self, data): response = { \"user\": None, \"logged_in\": False, \"errors\": [] } if len(data[\"email\"]) == 0: response[\"errors\"].append(\"Email is required!\") elif not EMAIL_REGEX.match(data[\"email\"]): response[\"errors\"].append(\"Invalid email!\") if len(data[\"password\"]) < 8: response[\"errors\"].append(\"Password must be 8 characters or longer!\") if len(response[\"errors\"]) == 0: user = User.userManager.filter(email=data[\"email\"]) if len(user) > 0: if bcrypt.checkpw(data[\"password\"].encode(), user[0].password.encode()): response[\"logged_in\"] = True response[\"user\"] = user[0] else: response[\"errors\"].append(\"Incorrect Password!\") else: response[\"errors\"].append(\"Email not found!\") return response class User(models.Model): name = models.CharField(max_length=255) alias = models.CharField(max_length=255) email = models.CharField(max_length=255) password = models.CharField(max_length=255) date_of_birth = models.DateField(max_length=255) friends = models.ManyToManyField(\"self\", blank=True) userManager = UserManager() ",
		"hash": "53a1dc7b12a8ac246b0483dd034a9f75cfd5e006334728fa0613d30813ce6d5cd7aa1bfac52c4bd8463f9b93942bdb2aa9fffe3c7e05e985c9f0e39a234d97bd"
	},
	"friends/apps/friends_app/templates/friends_app/user.html": {
		"raw": "<!DOCTYPE html> <html> <head> <title>Friends</title> </head> <body> <p><a href=\"/friends\">Home</a> | <a href=\"/logout\">Logout</a></p> <p>Name: {{ user.name }}</p> <p>Email: {{ user.email }}</p> </body> </html>",
		"hash": "d821b668cfbc3279e34f692142c81df1eadaf062a0aa69de9d0c74886fcc14daf244d60a6c965175dc0fbb7c67c8965ef4f2142d33e916b1fa17a82ecb3ebac5"
	},
	"friends/apps/friends_app/templates/friends_app/index.html": {
		"raw": "<!DOCTYPE html> <html> <head> <title>Friends</title> </head> <body> <h1>Welcome to Friends</h1> <fieldset> <legend>Register</legend> <form action=\"/register\" method=\"post\"> {% csrf_token %} Name: <input type=\"text\" name=\"name\" placeholder=\"name\"><br> Alias: <input type=\"text\" name=\"alias\" placeholder=\"alias\"><br> Email: <input type=\"text\" name=\"email\" placeholder=\"email\"><br> Password: <input type=\"password\" name=\"password\" placeholder=\"password\"><br> Confirm Password: <input type=\"password\" name=\"confirm_password\" placeholder=\"confirm password\"><br> Date of Birth: <input type=\"date\" name=\"date_of_birth\"><br> <input type=\"submit\" value=\"Register\"> </form> </fieldset> <fieldset> <legend>Login</legend> <form action=\"/login\" method=\"post\"> {% csrf_token %} Email: <input type=\"text\" name=\"email\" placeholder=\"email\"><br> Password: <input type=\"password\" name=\"password\" placeholder=\"password\"><br> <input type=\"submit\" value=\"Login\"> </form> </fieldset> {% if messages %} <ul> {% for message in messages %} <li>{{ message }}</li> {% endfor %} </ul> {% endif %} </body> </html>",
		"hash": "f39406b399e26f50741cb71bb173942377a549bac2692ceeac75da47a31a70d8d45ac679d1aa71fb253f1ccb18a080165264e979deaf3fdc85ccba5b5b2685e1"
	},
	"friends/apps/friends_app/templates/friends_app/friends.html": {
		"raw": "<!DOCTYPE html> <html> <head> <title>Friends</title> </head> <body> <h1>Friends</h1> <p>Welcome back: {{ request.session.user.name }}</p> <p><a href=\"/logout\">Logout</a></p> <fieldset> <legend>List of your friends</legend> {% if friends.count > 0 %} <table border=1> <tr> <th>alias</th> <th>action</th> </tr> {% for user in friends %} <tr> <td>{{ user.alias }}</td> <td> <a href=\"/user/{{user.id}}\"><button>View Profile</button></a><form action=\"/user/{{user.id}}/unfriend\" method=\"post\" style=\"display: inline;\"> {% csrf_token %} <input type=\"submit\" value=\"Remove {{ user.alias }} from your friends.\"> </form> </td> </tr> {% endfor %} </table> {% else %} <p>You don't have any friends.</p> {% endif %} </fieldset> <fieldset> <legend>Other users not in your friends list</legend> {% if users.count > 0 %} <table border=1> <tr> <th>alias</th> <th>action</th> </tr> {% for user in users %} <tr> <td><a href=\"/user/{{user.id}}\">{{ user.alias }}</a></td> <td> <form action=\"/user/{{user.id}}/friend\" method=\"post\"> {% csrf_token %} <input type=\"submit\" value=\"Add as Friend\"> </form> </td> </tr> {% endfor %} </table> {% else %} <p>There are no other users.</p> {% endif %} </fieldset> </body> </html>",
		"hash": "da400d66e70e0a890b48fc6372222ae7a694804e28368f50cef978c15ba2d7761eb5ac9470c9f3b0b8ff7332ec55e6a1ddb24ecfe8b33cedd466104ac298e5ab"
	},
	"friends/apps/friends_app/views.py": {
		"raw": "# -*- coding: utf-8 -*- from __future__ import unicode_literals from django.shortcuts import render, redirect from django.contrib import messages from .models import User def index(req): return render(req, \"friends_app/index.html\") def register(req): user = User.userManager.register(req.POST) if user[\"logged_in\"]: req.session[\"user\"] = { \"id\": user[\"user\"].id, \"name\": user[\"user\"].name } return redirect('/friends') else: for error in user[\"errors\"]: messages.add_message(req, messages.ERROR, error) return redirect('/') def login(req): user = User.userManager.login(req.POST) if user[\"logged_in\"]: req.session[\"user\"] = { \"id\": user[\"user\"].id, \"name\": user[\"user\"].name } return redirect('/friends') else: for error in user[\"errors\"]: messages.add_message(req, messages.ERROR, error) return redirect('/') def logout(req): req.session.clear() return redirect('/') def friends(req): if 'user' not in req.session: messages.add_message(req, messages.ERROR, \"You must log in first!\") friends = User.userManager.get(id=req.session[\"user\"][\"id\"]).friends.all() users = User.userManager.all().exclude(id=req.session[\"user\"][\"id\"]) for user in friends: users = users.exclude(id=user.id) context = { \"users\": users, \"friends\": friends } return render(req, \"friends_app/friends.html\", context) def showUser(req, id): user = User.userManager.get(id=id) return render(req, \"friends_app/user.html\", {\"user\": user}) def addFriend(req, id): user = User.userManager.get(id=req.session[\"user\"][\"id\"]) friend = User.userManager.get(id=id) user.friends.add(friend) friend.friends.add(user) return redirect('/friends') def removeFriend(req, id): user = User.userManager.get(id=req.session[\"user\"][\"id\"]) friend = User.userManager.get(id=id) user.friends.remove(friend) friend.friends.remove(user) return redirect('/friends')",
		"hash": "a37654b132a4652f6609c8eb48e85c938c2c6357d4a884e1340e8a28cd139538fa82fab740a2187eb3837924c9737d4e7d7b51cc41049854d1f433d8bf786f07"
	},
	"friends/apps/friends_app/tests.py": {
		"raw": "# -*- coding: utf-8 -*- from __future__ import unicode_literals from django.test import TestCase # Create your tests here.",
		"hash": "80b42d329a2bb345df1004c8ff0298ae1f94205567c134f5abd6aa95e1d656b92ead22593173f63d22d5349646073e7badc4e1ca7a6cd2fa140c25af21135c9d"
	},
	"friends/manage.py": {
		"raw": "#!/usr/bin/env python import os import sys if __name__ == \"__main__\": os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"friends.settings\") try: from django.core.management import execute_from_command_line except ImportError: # The above import may fail for some other reason. Ensure that the # issue is really that Django is missing to avoid masking other # exceptions on Python 2. try: import django except ImportError: raise ImportError( \"Couldn't import Django. Are you sure it's installed and \" \"available on your PYTHONPATH environment variable? Did you \" \"forget to activate a virtual environment?\" ) raise execute_from_command_line(sys.argv) ",
		"hash": "10f1e5df883d60ef88ef8c50f56285009427c20d1579dc8ec90d44d3e75bd46d8eece594590188b7b44d0a3666602895ed7bb606c75d484b4d9129a31796d906"
	}
}